/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DomainsStore422ResponseErrors - struct for DomainsStore422ResponseErrors
type DomainsStore422ResponseErrors struct {
	ArrayOfArrayOfString *[][]string
	ArrayOfString *[]string
	MapmapOfStringarrayOfString *map[string][]string
	MapmapOfStringstring *map[string]string
}

// [][]stringAsDomainsStore422ResponseErrors is a convenience function that returns [][]string wrapped in DomainsStore422ResponseErrors
func ArrayOfArrayOfStringAsDomainsStore422ResponseErrors(v *[][]string) DomainsStore422ResponseErrors {
	return DomainsStore422ResponseErrors{
		ArrayOfArrayOfString: v,
	}
}

// []stringAsDomainsStore422ResponseErrors is a convenience function that returns []string wrapped in DomainsStore422ResponseErrors
func ArrayOfStringAsDomainsStore422ResponseErrors(v *[]string) DomainsStore422ResponseErrors {
	return DomainsStore422ResponseErrors{
		ArrayOfString: v,
	}
}

// map[string][]stringAsDomainsStore422ResponseErrors is a convenience function that returns map[string][]string wrapped in DomainsStore422ResponseErrors
func MapmapOfStringarrayOfStringAsDomainsStore422ResponseErrors(v *map[string][]string) DomainsStore422ResponseErrors {
	return DomainsStore422ResponseErrors{
		MapmapOfStringarrayOfString: v,
	}
}

// map[string]stringAsDomainsStore422ResponseErrors is a convenience function that returns map[string]string wrapped in DomainsStore422ResponseErrors
func MapmapOfStringstringAsDomainsStore422ResponseErrors(v *map[string]string) DomainsStore422ResponseErrors {
	return DomainsStore422ResponseErrors{
		MapmapOfStringstring: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DomainsStore422ResponseErrors) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfArrayOfString)
	if err == nil {
		jsonArrayOfArrayOfString, _ := json.Marshal(dst.ArrayOfArrayOfString)
		if string(jsonArrayOfArrayOfString) == "{}" { // empty struct
			dst.ArrayOfArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfArrayOfString); err != nil {
				dst.ArrayOfArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfArrayOfString = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into MapmapOfStringarrayOfString
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringarrayOfString)
	if err == nil {
		jsonMapmapOfStringarrayOfString, _ := json.Marshal(dst.MapmapOfStringarrayOfString)
		if string(jsonMapmapOfStringarrayOfString) == "{}" { // empty struct
			dst.MapmapOfStringarrayOfString = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringarrayOfString); err != nil {
				dst.MapmapOfStringarrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringarrayOfString = nil
	}

	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil {
		jsonMapmapOfStringstring, _ := json.Marshal(dst.MapmapOfStringstring)
		if string(jsonMapmapOfStringstring) == "{}" { // empty struct
			dst.MapmapOfStringstring = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringstring); err != nil {
				dst.MapmapOfStringstring = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringstring = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfArrayOfString = nil
		dst.ArrayOfString = nil
		dst.MapmapOfStringarrayOfString = nil
		dst.MapmapOfStringstring = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DomainsStore422ResponseErrors)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DomainsStore422ResponseErrors)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DomainsStore422ResponseErrors) MarshalJSON() ([]byte, error) {
	if src.ArrayOfArrayOfString != nil {
		return json.Marshal(&src.ArrayOfArrayOfString)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.MapmapOfStringarrayOfString != nil {
		return json.Marshal(&src.MapmapOfStringarrayOfString)
	}

	if src.MapmapOfStringstring != nil {
		return json.Marshal(&src.MapmapOfStringstring)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DomainsStore422ResponseErrors) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfArrayOfString != nil {
		return obj.ArrayOfArrayOfString
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.MapmapOfStringarrayOfString != nil {
		return obj.MapmapOfStringarrayOfString
	}

	if obj.MapmapOfStringstring != nil {
		return obj.MapmapOfStringstring
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DomainsStore422ResponseErrors) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfArrayOfString != nil {
		return *obj.ArrayOfArrayOfString
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	if obj.MapmapOfStringarrayOfString != nil {
		return *obj.MapmapOfStringarrayOfString
	}

	if obj.MapmapOfStringstring != nil {
		return *obj.MapmapOfStringstring
	}

	// all schemas are nil
	return nil
}

type NullableDomainsStore422ResponseErrors struct {
	value *DomainsStore422ResponseErrors
	isSet bool
}

func (v NullableDomainsStore422ResponseErrors) Get() *DomainsStore422ResponseErrors {
	return v.value
}

func (v *NullableDomainsStore422ResponseErrors) Set(val *DomainsStore422ResponseErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainsStore422ResponseErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainsStore422ResponseErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainsStore422ResponseErrors(val *DomainsStore422ResponseErrors) *NullableDomainsStore422ResponseErrors {
	return &NullableDomainsStore422ResponseErrors{value: val, isSet: true}
}

func (v NullableDomainsStore422ResponseErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainsStore422ResponseErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



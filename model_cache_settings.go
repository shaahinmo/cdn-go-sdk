/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the CacheSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheSettings{}

// CacheSettings struct for CacheSettings
type CacheSettings struct {
	CacheDeveloperMode *bool `json:"cache_developer_mode,omitempty"`
	CacheConsistentUptime *bool `json:"cache_consistent_uptime,omitempty"`
	// Maximum size of cacheable content in bytes
	CacheMaxSize *int32 `json:"cache_max_size,omitempty"`
	CacheStatus *string `json:"cache_status,omitempty"`
	CachePage200 *string `json:"cache_page_200,omitempty"`
	CachePageAny *string `json:"cache_page_any,omitempty"`
	CacheBrowser *string `json:"cache_browser,omitempty"`
	// To consider scheme (HTTP/HTTPs) in cache
	// Deprecated
	CacheScheme *bool `json:"cache_scheme,omitempty"`
	// Ignore default behavior in caching set-cookie header
	CacheIgnoreSc *bool `json:"cache_ignore_sc,omitempty"`
	// Cookie variables to consider in cache (comma separaterd values)
	CacheCookie *string `json:"cache_cookie,omitempty"`
	// To consider query args or not
	CacheArgs *bool `json:"cache_args,omitempty"`
	// Query string arguments to consider in cache (& seperated values)
	CacheArg *string `json:"cache_arg,omitempty"`
}

// NewCacheSettings instantiates a new CacheSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheSettings() *CacheSettings {
	this := CacheSettings{}
	var cacheArg string = ""
	this.CacheArg = &cacheArg
	return &this
}

// NewCacheSettingsWithDefaults instantiates a new CacheSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheSettingsWithDefaults() *CacheSettings {
	this := CacheSettings{}
	var cacheArg string = ""
	this.CacheArg = &cacheArg
	return &this
}

// GetCacheDeveloperMode returns the CacheDeveloperMode field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheDeveloperMode() bool {
	if o == nil || IsNil(o.CacheDeveloperMode) {
		var ret bool
		return ret
	}
	return *o.CacheDeveloperMode
}

// GetCacheDeveloperModeOk returns a tuple with the CacheDeveloperMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheDeveloperModeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheDeveloperMode) {
		return nil, false
	}
	return o.CacheDeveloperMode, true
}

// HasCacheDeveloperMode returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheDeveloperMode() bool {
	if o != nil && !IsNil(o.CacheDeveloperMode) {
		return true
	}

	return false
}

// SetCacheDeveloperMode gets a reference to the given bool and assigns it to the CacheDeveloperMode field.
func (o *CacheSettings) SetCacheDeveloperMode(v bool) {
	o.CacheDeveloperMode = &v
}

// GetCacheConsistentUptime returns the CacheConsistentUptime field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheConsistentUptime() bool {
	if o == nil || IsNil(o.CacheConsistentUptime) {
		var ret bool
		return ret
	}
	return *o.CacheConsistentUptime
}

// GetCacheConsistentUptimeOk returns a tuple with the CacheConsistentUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheConsistentUptimeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheConsistentUptime) {
		return nil, false
	}
	return o.CacheConsistentUptime, true
}

// HasCacheConsistentUptime returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheConsistentUptime() bool {
	if o != nil && !IsNil(o.CacheConsistentUptime) {
		return true
	}

	return false
}

// SetCacheConsistentUptime gets a reference to the given bool and assigns it to the CacheConsistentUptime field.
func (o *CacheSettings) SetCacheConsistentUptime(v bool) {
	o.CacheConsistentUptime = &v
}

// GetCacheMaxSize returns the CacheMaxSize field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheMaxSize() int32 {
	if o == nil || IsNil(o.CacheMaxSize) {
		var ret int32
		return ret
	}
	return *o.CacheMaxSize
}

// GetCacheMaxSizeOk returns a tuple with the CacheMaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheMaxSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.CacheMaxSize) {
		return nil, false
	}
	return o.CacheMaxSize, true
}

// HasCacheMaxSize returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheMaxSize() bool {
	if o != nil && !IsNil(o.CacheMaxSize) {
		return true
	}

	return false
}

// SetCacheMaxSize gets a reference to the given int32 and assigns it to the CacheMaxSize field.
func (o *CacheSettings) SetCacheMaxSize(v int32) {
	o.CacheMaxSize = &v
}

// GetCacheStatus returns the CacheStatus field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheStatus() string {
	if o == nil || IsNil(o.CacheStatus) {
		var ret string
		return ret
	}
	return *o.CacheStatus
}

// GetCacheStatusOk returns a tuple with the CacheStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CacheStatus) {
		return nil, false
	}
	return o.CacheStatus, true
}

// HasCacheStatus returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheStatus() bool {
	if o != nil && !IsNil(o.CacheStatus) {
		return true
	}

	return false
}

// SetCacheStatus gets a reference to the given string and assigns it to the CacheStatus field.
func (o *CacheSettings) SetCacheStatus(v string) {
	o.CacheStatus = &v
}

// GetCachePage200 returns the CachePage200 field value if set, zero value otherwise.
func (o *CacheSettings) GetCachePage200() string {
	if o == nil || IsNil(o.CachePage200) {
		var ret string
		return ret
	}
	return *o.CachePage200
}

// GetCachePage200Ok returns a tuple with the CachePage200 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCachePage200Ok() (*string, bool) {
	if o == nil || IsNil(o.CachePage200) {
		return nil, false
	}
	return o.CachePage200, true
}

// HasCachePage200 returns a boolean if a field has been set.
func (o *CacheSettings) HasCachePage200() bool {
	if o != nil && !IsNil(o.CachePage200) {
		return true
	}

	return false
}

// SetCachePage200 gets a reference to the given string and assigns it to the CachePage200 field.
func (o *CacheSettings) SetCachePage200(v string) {
	o.CachePage200 = &v
}

// GetCachePageAny returns the CachePageAny field value if set, zero value otherwise.
func (o *CacheSettings) GetCachePageAny() string {
	if o == nil || IsNil(o.CachePageAny) {
		var ret string
		return ret
	}
	return *o.CachePageAny
}

// GetCachePageAnyOk returns a tuple with the CachePageAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCachePageAnyOk() (*string, bool) {
	if o == nil || IsNil(o.CachePageAny) {
		return nil, false
	}
	return o.CachePageAny, true
}

// HasCachePageAny returns a boolean if a field has been set.
func (o *CacheSettings) HasCachePageAny() bool {
	if o != nil && !IsNil(o.CachePageAny) {
		return true
	}

	return false
}

// SetCachePageAny gets a reference to the given string and assigns it to the CachePageAny field.
func (o *CacheSettings) SetCachePageAny(v string) {
	o.CachePageAny = &v
}

// GetCacheBrowser returns the CacheBrowser field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheBrowser() string {
	if o == nil || IsNil(o.CacheBrowser) {
		var ret string
		return ret
	}
	return *o.CacheBrowser
}

// GetCacheBrowserOk returns a tuple with the CacheBrowser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheBrowserOk() (*string, bool) {
	if o == nil || IsNil(o.CacheBrowser) {
		return nil, false
	}
	return o.CacheBrowser, true
}

// HasCacheBrowser returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheBrowser() bool {
	if o != nil && !IsNil(o.CacheBrowser) {
		return true
	}

	return false
}

// SetCacheBrowser gets a reference to the given string and assigns it to the CacheBrowser field.
func (o *CacheSettings) SetCacheBrowser(v string) {
	o.CacheBrowser = &v
}

// GetCacheScheme returns the CacheScheme field value if set, zero value otherwise.
// Deprecated
func (o *CacheSettings) GetCacheScheme() bool {
	if o == nil || IsNil(o.CacheScheme) {
		var ret bool
		return ret
	}
	return *o.CacheScheme
}

// GetCacheSchemeOk returns a tuple with the CacheScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CacheSettings) GetCacheSchemeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheScheme) {
		return nil, false
	}
	return o.CacheScheme, true
}

// HasCacheScheme returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheScheme() bool {
	if o != nil && !IsNil(o.CacheScheme) {
		return true
	}

	return false
}

// SetCacheScheme gets a reference to the given bool and assigns it to the CacheScheme field.
// Deprecated
func (o *CacheSettings) SetCacheScheme(v bool) {
	o.CacheScheme = &v
}

// GetCacheIgnoreSc returns the CacheIgnoreSc field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheIgnoreSc() bool {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreSc
}

// GetCacheIgnoreScOk returns a tuple with the CacheIgnoreSc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheIgnoreScOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		return nil, false
	}
	return o.CacheIgnoreSc, true
}

// HasCacheIgnoreSc returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheIgnoreSc() bool {
	if o != nil && !IsNil(o.CacheIgnoreSc) {
		return true
	}

	return false
}

// SetCacheIgnoreSc gets a reference to the given bool and assigns it to the CacheIgnoreSc field.
func (o *CacheSettings) SetCacheIgnoreSc(v bool) {
	o.CacheIgnoreSc = &v
}

// GetCacheCookie returns the CacheCookie field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheCookie() string {
	if o == nil || IsNil(o.CacheCookie) {
		var ret string
		return ret
	}
	return *o.CacheCookie
}

// GetCacheCookieOk returns a tuple with the CacheCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheCookieOk() (*string, bool) {
	if o == nil || IsNil(o.CacheCookie) {
		return nil, false
	}
	return o.CacheCookie, true
}

// HasCacheCookie returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheCookie() bool {
	if o != nil && !IsNil(o.CacheCookie) {
		return true
	}

	return false
}

// SetCacheCookie gets a reference to the given string and assigns it to the CacheCookie field.
func (o *CacheSettings) SetCacheCookie(v string) {
	o.CacheCookie = &v
}

// GetCacheArgs returns the CacheArgs field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheArgs() bool {
	if o == nil || IsNil(o.CacheArgs) {
		var ret bool
		return ret
	}
	return *o.CacheArgs
}

// GetCacheArgsOk returns a tuple with the CacheArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheArgsOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheArgs) {
		return nil, false
	}
	return o.CacheArgs, true
}

// HasCacheArgs returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheArgs() bool {
	if o != nil && !IsNil(o.CacheArgs) {
		return true
	}

	return false
}

// SetCacheArgs gets a reference to the given bool and assigns it to the CacheArgs field.
func (o *CacheSettings) SetCacheArgs(v bool) {
	o.CacheArgs = &v
}

// GetCacheArg returns the CacheArg field value if set, zero value otherwise.
func (o *CacheSettings) GetCacheArg() string {
	if o == nil || IsNil(o.CacheArg) {
		var ret string
		return ret
	}
	return *o.CacheArg
}

// GetCacheArgOk returns a tuple with the CacheArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheSettings) GetCacheArgOk() (*string, bool) {
	if o == nil || IsNil(o.CacheArg) {
		return nil, false
	}
	return o.CacheArg, true
}

// HasCacheArg returns a boolean if a field has been set.
func (o *CacheSettings) HasCacheArg() bool {
	if o != nil && !IsNil(o.CacheArg) {
		return true
	}

	return false
}

// SetCacheArg gets a reference to the given string and assigns it to the CacheArg field.
func (o *CacheSettings) SetCacheArg(v string) {
	o.CacheArg = &v
}

func (o CacheSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CacheDeveloperMode) {
		toSerialize["cache_developer_mode"] = o.CacheDeveloperMode
	}
	if !IsNil(o.CacheConsistentUptime) {
		toSerialize["cache_consistent_uptime"] = o.CacheConsistentUptime
	}
	if !IsNil(o.CacheMaxSize) {
		toSerialize["cache_max_size"] = o.CacheMaxSize
	}
	if !IsNil(o.CacheStatus) {
		toSerialize["cache_status"] = o.CacheStatus
	}
	if !IsNil(o.CachePage200) {
		toSerialize["cache_page_200"] = o.CachePage200
	}
	if !IsNil(o.CachePageAny) {
		toSerialize["cache_page_any"] = o.CachePageAny
	}
	if !IsNil(o.CacheBrowser) {
		toSerialize["cache_browser"] = o.CacheBrowser
	}
	if !IsNil(o.CacheScheme) {
		toSerialize["cache_scheme"] = o.CacheScheme
	}
	if !IsNil(o.CacheIgnoreSc) {
		toSerialize["cache_ignore_sc"] = o.CacheIgnoreSc
	}
	if !IsNil(o.CacheCookie) {
		toSerialize["cache_cookie"] = o.CacheCookie
	}
	if !IsNil(o.CacheArgs) {
		toSerialize["cache_args"] = o.CacheArgs
	}
	if !IsNil(o.CacheArg) {
		toSerialize["cache_arg"] = o.CacheArg
	}
	return toSerialize, nil
}

type NullableCacheSettings struct {
	value *CacheSettings
	isSet bool
}

func (v NullableCacheSettings) Get() *CacheSettings {
	return v.value
}

func (v *NullableCacheSettings) Set(val *CacheSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheSettings(val *CacheSettings) *NullableCacheSettings {
	return &NullableCacheSettings{value: val, isSet: true}
}

func (v NullableCacheSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



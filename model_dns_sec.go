/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the DnsSec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsSec{}

// DnsSec struct for DnsSec
type DnsSec struct {
	Enabled *bool `json:"enabled,omitempty"`
	Ds NullableString `json:"ds,omitempty"`
}

// NewDnsSec instantiates a new DnsSec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsSec() *DnsSec {
	this := DnsSec{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewDnsSecWithDefaults instantiates a new DnsSec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsSecWithDefaults() *DnsSec {
	this := DnsSec{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DnsSec) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSec) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DnsSec) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DnsSec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDs returns the Ds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DnsSec) GetDs() string {
	if o == nil || IsNil(o.Ds.Get()) {
		var ret string
		return ret
	}
	return *o.Ds.Get()
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DnsSec) GetDsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ds.Get(), o.Ds.IsSet()
}

// HasDs returns a boolean if a field has been set.
func (o *DnsSec) HasDs() bool {
	if o != nil && o.Ds.IsSet() {
		return true
	}

	return false
}

// SetDs gets a reference to the given NullableString and assigns it to the Ds field.
func (o *DnsSec) SetDs(v string) {
	o.Ds.Set(&v)
}
// SetDsNil sets the value for Ds to be an explicit nil
func (o *DnsSec) SetDsNil() {
	o.Ds.Set(nil)
}

// UnsetDs ensures that no value is present for Ds, not even an explicit nil
func (o *DnsSec) UnsetDs() {
	o.Ds.Unset()
}

func (o DnsSec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsSec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Ds.IsSet() {
		toSerialize["ds"] = o.Ds.Get()
	}
	return toSerialize, nil
}

type NullableDnsSec struct {
	value *DnsSec
	isSet bool
}

func (v NullableDnsSec) Get() *DnsSec {
	return v.value
}

func (v *NullableDnsSec) Set(val *DnsSec) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsSec) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsSec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsSec(val *DnsSec) *NullableDnsSec {
	return &NullableDnsSec{value: val, isSet: true}
}

func (v NullableDnsSec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsSec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



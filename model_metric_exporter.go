/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricExporter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricExporter{}

// MetricExporter struct for MetricExporter
type MetricExporter struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Type string `json:"type"`
	Interval string `json:"interval"`
	Status bool `json:"status"`
}

type _MetricExporter MetricExporter

// NewMetricExporter instantiates a new MetricExporter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricExporter(name string, type_ string, interval string, status bool) *MetricExporter {
	this := MetricExporter{}
	this.Name = name
	this.Type = type_
	this.Interval = interval
	this.Status = status
	return &this
}

// NewMetricExporterWithDefaults instantiates a new MetricExporter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricExporterWithDefaults() *MetricExporter {
	this := MetricExporter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MetricExporter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricExporter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MetricExporter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MetricExporter) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *MetricExporter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricExporter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetricExporter) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MetricExporter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricExporter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricExporter) SetType(v string) {
	o.Type = v
}

// GetInterval returns the Interval field value
func (o *MetricExporter) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *MetricExporter) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *MetricExporter) SetInterval(v string) {
	o.Interval = v
}

// GetStatus returns the Status field value
func (o *MetricExporter) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MetricExporter) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MetricExporter) SetStatus(v bool) {
	o.Status = v
}

func (o MetricExporter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricExporter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["interval"] = o.Interval
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *MetricExporter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"interval",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricExporter := _MetricExporter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricExporter)

	if err != nil {
		return err
	}

	*o = MetricExporter(varMetricExporter)

	return err
}

type NullableMetricExporter struct {
	value *MetricExporter
	isSet bool
}

func (v NullableMetricExporter) Get() *MetricExporter {
	return v.value
}

func (v *NullableMetricExporter) Set(val *MetricExporter) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricExporter) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricExporter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricExporter(val *MetricExporter) *NullableMetricExporter {
	return &NullableMetricExporter{value: val, isSet: true}
}

func (v NullableMetricExporter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricExporter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TcpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TcpConfig{}

// TcpConfig struct for TcpConfig
type TcpConfig struct {
	Port int32 `json:"port"`
	// In milliseconds
	Timeout int32 `json:"timeout"`
}

type _TcpConfig TcpConfig

// NewTcpConfig instantiates a new TcpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTcpConfig(port int32, timeout int32) *TcpConfig {
	this := TcpConfig{}
	this.Port = port
	this.Timeout = timeout
	return &this
}

// NewTcpConfigWithDefaults instantiates a new TcpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTcpConfigWithDefaults() *TcpConfig {
	this := TcpConfig{}
	return &this
}

// GetPort returns the Port field value
func (o *TcpConfig) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *TcpConfig) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *TcpConfig) SetPort(v int32) {
	o.Port = v
}

// GetTimeout returns the Timeout field value
func (o *TcpConfig) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *TcpConfig) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *TcpConfig) SetTimeout(v int32) {
	o.Timeout = v
}

func (o TcpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TcpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port
	toSerialize["timeout"] = o.Timeout
	return toSerialize, nil
}

func (o *TcpConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
		"timeout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTcpConfig := _TcpConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTcpConfig)

	if err != nil {
		return err
	}

	*o = TcpConfig(varTcpConfig)

	return err
}

type NullableTcpConfig struct {
	value *TcpConfig
	isSet bool
}

func (v NullableTcpConfig) Get() *TcpConfig {
	return v.value
}

func (v *NullableTcpConfig) Set(val *TcpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTcpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTcpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTcpConfig(val *TcpConfig) *NullableTcpConfig {
	return &NullableTcpConfig{value: val, isSet: true}
}

func (v NullableTcpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTcpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



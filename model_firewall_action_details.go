/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FirewallActionDetails - Details of bypass or challenge actions
type FirewallActionDetails struct {
	BypassAction *BypassAction
	ChallengeAction *ChallengeAction
}

// BypassActionAsFirewallActionDetails is a convenience function that returns BypassAction wrapped in FirewallActionDetails
func BypassActionAsFirewallActionDetails(v *BypassAction) FirewallActionDetails {
	return FirewallActionDetails{
		BypassAction: v,
	}
}

// ChallengeActionAsFirewallActionDetails is a convenience function that returns ChallengeAction wrapped in FirewallActionDetails
func ChallengeActionAsFirewallActionDetails(v *ChallengeAction) FirewallActionDetails {
	return FirewallActionDetails{
		ChallengeAction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FirewallActionDetails) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into BypassAction
	err = newStrictDecoder(data).Decode(&dst.BypassAction)
	if err == nil {
		jsonBypassAction, _ := json.Marshal(dst.BypassAction)
		if string(jsonBypassAction) == "{}" { // empty struct
			dst.BypassAction = nil
		} else {
			if err = validator.Validate(dst.BypassAction); err != nil {
				dst.BypassAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.BypassAction = nil
	}

	// try to unmarshal data into ChallengeAction
	err = newStrictDecoder(data).Decode(&dst.ChallengeAction)
	if err == nil {
		jsonChallengeAction, _ := json.Marshal(dst.ChallengeAction)
		if string(jsonChallengeAction) == "{}" { // empty struct
			dst.ChallengeAction = nil
		} else {
			if err = validator.Validate(dst.ChallengeAction); err != nil {
				dst.ChallengeAction = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChallengeAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BypassAction = nil
		dst.ChallengeAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FirewallActionDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FirewallActionDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FirewallActionDetails) MarshalJSON() ([]byte, error) {
	if src.BypassAction != nil {
		return json.Marshal(&src.BypassAction)
	}

	if src.ChallengeAction != nil {
		return json.Marshal(&src.ChallengeAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FirewallActionDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BypassAction != nil {
		return obj.BypassAction
	}

	if obj.ChallengeAction != nil {
		return obj.ChallengeAction
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FirewallActionDetails) GetActualInstanceValue() (interface{}) {
	if obj.BypassAction != nil {
		return *obj.BypassAction
	}

	if obj.ChallengeAction != nil {
		return *obj.ChallengeAction
	}

	// all schemas are nil
	return nil
}

type NullableFirewallActionDetails struct {
	value *FirewallActionDetails
	isSet bool
}

func (v NullableFirewallActionDetails) Get() *FirewallActionDetails {
	return v.value
}

func (v *NullableFirewallActionDetails) Set(val *FirewallActionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallActionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallActionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallActionDetails(val *FirewallActionDetails) *NullableFirewallActionDetails {
	return &NullableFirewallActionDetails{value: val, isSet: true}
}

func (v NullableFirewallActionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallActionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"time"
)

// checks if the AccountCertificateOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountCertificateOrder{}

// AccountCertificateOrder struct for AccountCertificateOrder
type AccountCertificateOrder struct {
	Id *string `json:"id,omitempty"`
	OrderId *string `json:"order_id,omitempty"`
	Status *string `json:"status,omitempty"`
	DomainNames []string `json:"domain_names,omitempty"`
	Product *string `json:"product,omitempty"`
	Errors map[string]interface{} `json:"errors,omitempty"`
	ExpiryDate *time.Time `json:"expiry_date,omitempty"`
	IsRevoked *bool `json:"is_revoked,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAccountCertificateOrder instantiates a new AccountCertificateOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountCertificateOrder() *AccountCertificateOrder {
	this := AccountCertificateOrder{}
	return &this
}

// NewAccountCertificateOrderWithDefaults instantiates a new AccountCertificateOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountCertificateOrderWithDefaults() *AccountCertificateOrder {
	this := AccountCertificateOrder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountCertificateOrder) SetId(v string) {
	o.Id = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *AccountCertificateOrder) SetOrderId(v string) {
	o.OrderId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AccountCertificateOrder) SetStatus(v string) {
	o.Status = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetDomainNames() []string {
	if o == nil || IsNil(o.DomainNames) {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasDomainNames() bool {
	if o != nil && !IsNil(o.DomainNames) {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *AccountCertificateOrder) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *AccountCertificateOrder) SetProduct(v string) {
	o.Product = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountCertificateOrder) GetErrors() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountCertificateOrder) GetErrorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return map[string]interface{}{}, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *AccountCertificateOrder) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetExpiryDate() time.Time {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *AccountCertificateOrder) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetIsRevoked returns the IsRevoked field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetIsRevoked() bool {
	if o == nil || IsNil(o.IsRevoked) {
		var ret bool
		return ret
	}
	return *o.IsRevoked
}

// GetIsRevokedOk returns a tuple with the IsRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetIsRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRevoked) {
		return nil, false
	}
	return o.IsRevoked, true
}

// HasIsRevoked returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasIsRevoked() bool {
	if o != nil && !IsNil(o.IsRevoked) {
		return true
	}

	return false
}

// SetIsRevoked gets a reference to the given bool and assigns it to the IsRevoked field.
func (o *AccountCertificateOrder) SetIsRevoked(v bool) {
	o.IsRevoked = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccountCertificateOrder) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AccountCertificateOrder) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountCertificateOrder) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AccountCertificateOrder) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AccountCertificateOrder) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AccountCertificateOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountCertificateOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DomainNames) {
		toSerialize["domain_names"] = o.DomainNames
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}
	if !IsNil(o.IsRevoked) {
		toSerialize["is_revoked"] = o.IsRevoked
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableAccountCertificateOrder struct {
	value *AccountCertificateOrder
	isSet bool
}

func (v NullableAccountCertificateOrder) Get() *AccountCertificateOrder {
	return v.value
}

func (v *NullableAccountCertificateOrder) Set(val *AccountCertificateOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountCertificateOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountCertificateOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountCertificateOrder(val *AccountCertificateOrder) *NullableAccountCertificateOrder {
	return &NullableAccountCertificateOrder{value: val, isSet: true}
}

func (v NullableAccountCertificateOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountCertificateOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



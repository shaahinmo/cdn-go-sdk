/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"time"
)

// checks if the PageRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageRule{}

// PageRule struct for PageRule
type PageRule struct {
	Cache200 *string `json:"cache_200,omitempty"`
	CacheAny *string `json:"cache_any,omitempty"`
	// Cookie variables to consider in cache (comma separaterd values)
	CacheCookie *string `json:"cache_cookie,omitempty"`
	CacheDeviceType *bool `json:"cache_device_type,omitempty"`
	CacheArgs *bool `json:"cache_args,omitempty"`
	// Query string arguments to consider in cache (& seperated values)
	CacheArg *string `json:"cache_arg,omitempty"`
	// Deprecated
	CacheScheme *bool `json:"cache_scheme,omitempty"`
	CacheBrowser *string `json:"cache_browser,omitempty"`
	// Ignore default behavior in caching set-cookie header
	CacheIgnoreSc *bool `json:"cache_ignore_sc,omitempty"`
	// Ignore default behavior in caching vary header
	CacheIgnoreVary *bool `json:"cache_ignore_vary,omitempty"`
	CacheIgnoreCc *bool `json:"cache_ignore_cc,omitempty"`
	CorsHeader *string `json:"cors_header,omitempty"`
	// You cannot combine rewrite with redirect and secure link
	RewriteUrl *string `json:"rewrite_url,omitempty"`
	SlinkSecret *string `json:"slink_secret,omitempty"`
	SlinkMd5 []string `json:"slink_md5,omitempty"`
	// Name or ID of the load balancer
	LoadBalancer NullableString `json:"load_balancer,omitempty"`
	// UUID of an edge compute. This field is in `alpha` version.
	EdgeComputeId *string `json:"edge_compute_id,omitempty"`
	// Deprecated
	ClusterStatus *bool `json:"cluster_status,omitempty"`
	ImageResize *PageRuleImageResize `json:"image_resize,omitempty"`
	// Deprecated
	ClusterId NullableString `json:"cluster_id,omitempty"`
	UpstreamTimeout *UpstreamTimeout `json:"upstream_timeout,omitempty"`
	ReqCustomHeaders []map[string]interface{} `json:"req_custom_headers,omitempty"`
	ResCustomHeaders []map[string]interface{} `json:"res_custom_headers,omitempty"`
	ReqHideHeaders []string `json:"req_hide_headers,omitempty"`
	ResHideHeaders []string `json:"res_hide_headers,omitempty"`
	CustomHostHeader *string `json:"custom_host_header,omitempty"`
	Redirect *PageRuleRedirect `json:"redirect,omitempty"`
	Id *string `json:"id,omitempty"`
	DomainId *string `json:"domain_id,omitempty"`
	// Order of the page-rule
	Seq *int32 `json:"seq,omitempty"`
	// This flag is deprecated in favor of is_protected flag
	// Deprecated
	UrlType *string `json:"url_type,omitempty"`
	// Protected records cannot be modified or deleted by user.
	IsProtected *bool `json:"is_protected,omitempty"`
	// URL pattern of target pages
	Url *string `json:"url,omitempty"`
	CacheLevel *string `json:"cache_level,omitempty"`
	WafStatus *bool `json:"waf_status,omitempty"`
	// Shows whether firewall is enabled or not
	// Deprecated
	FwStatus *bool `json:"fw_status,omitempty"`
	Acceleration *Acceleration `json:"acceleration,omitempty"`
	// Secure link is enabled or not
	SlinkStatus *bool `json:"slink_status,omitempty"`
	// Is the page-rule enabled?
	Status *bool `json:"status,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewPageRule instantiates a new PageRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageRule() *PageRule {
	this := PageRule{}
	var urlType string = "default"
	this.UrlType = &urlType
	var cacheLevel string = "query_string"
	this.CacheLevel = &cacheLevel
	var wafStatus bool = true
	this.WafStatus = &wafStatus
	var fwStatus bool = true
	this.FwStatus = &fwStatus
	var slinkStatus bool = false
	this.SlinkStatus = &slinkStatus
	var status bool = true
	this.Status = &status
	return &this
}

// NewPageRuleWithDefaults instantiates a new PageRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageRuleWithDefaults() *PageRule {
	this := PageRule{}
	var cache200 string = "30m"
	this.Cache200 = &cache200
	var cacheAny string = "0s"
	this.CacheAny = &cacheAny
	var cacheCookie string = ""
	this.CacheCookie = &cacheCookie
	var cacheDeviceType bool = false
	this.CacheDeviceType = &cacheDeviceType
	var cacheArgs bool = true
	this.CacheArgs = &cacheArgs
	var cacheArg string = ""
	this.CacheArg = &cacheArg
	var cacheScheme bool = true
	this.CacheScheme = &cacheScheme
	var cacheBrowser string = "default"
	this.CacheBrowser = &cacheBrowser
	var cacheIgnoreSc bool = false
	this.CacheIgnoreSc = &cacheIgnoreSc
	var cacheIgnoreVary bool = true
	this.CacheIgnoreVary = &cacheIgnoreVary
	var cacheIgnoreCc bool = true
	this.CacheIgnoreCc = &cacheIgnoreCc
	var corsHeader string = "-"
	this.CorsHeader = &corsHeader
	var rewriteUrl string = "/path"
	this.RewriteUrl = &rewriteUrl
	var slinkSecret string = ""
	this.SlinkSecret = &slinkSecret
	var clusterStatus bool = false
	this.ClusterStatus = &clusterStatus
	var customHostHeader string = ""
	this.CustomHostHeader = &customHostHeader
	var urlType string = "default"
	this.UrlType = &urlType
	var cacheLevel string = "query_string"
	this.CacheLevel = &cacheLevel
	var wafStatus bool = true
	this.WafStatus = &wafStatus
	var fwStatus bool = true
	this.FwStatus = &fwStatus
	var slinkStatus bool = false
	this.SlinkStatus = &slinkStatus
	var status bool = true
	this.Status = &status
	return &this
}

// GetCache200 returns the Cache200 field value if set, zero value otherwise.
func (o *PageRule) GetCache200() string {
	if o == nil || IsNil(o.Cache200) {
		var ret string
		return ret
	}
	return *o.Cache200
}

// GetCache200Ok returns a tuple with the Cache200 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCache200Ok() (*string, bool) {
	if o == nil || IsNil(o.Cache200) {
		return nil, false
	}
	return o.Cache200, true
}

// HasCache200 returns a boolean if a field has been set.
func (o *PageRule) HasCache200() bool {
	if o != nil && !IsNil(o.Cache200) {
		return true
	}

	return false
}

// SetCache200 gets a reference to the given string and assigns it to the Cache200 field.
func (o *PageRule) SetCache200(v string) {
	o.Cache200 = &v
}

// GetCacheAny returns the CacheAny field value if set, zero value otherwise.
func (o *PageRule) GetCacheAny() string {
	if o == nil || IsNil(o.CacheAny) {
		var ret string
		return ret
	}
	return *o.CacheAny
}

// GetCacheAnyOk returns a tuple with the CacheAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheAnyOk() (*string, bool) {
	if o == nil || IsNil(o.CacheAny) {
		return nil, false
	}
	return o.CacheAny, true
}

// HasCacheAny returns a boolean if a field has been set.
func (o *PageRule) HasCacheAny() bool {
	if o != nil && !IsNil(o.CacheAny) {
		return true
	}

	return false
}

// SetCacheAny gets a reference to the given string and assigns it to the CacheAny field.
func (o *PageRule) SetCacheAny(v string) {
	o.CacheAny = &v
}

// GetCacheCookie returns the CacheCookie field value if set, zero value otherwise.
func (o *PageRule) GetCacheCookie() string {
	if o == nil || IsNil(o.CacheCookie) {
		var ret string
		return ret
	}
	return *o.CacheCookie
}

// GetCacheCookieOk returns a tuple with the CacheCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheCookieOk() (*string, bool) {
	if o == nil || IsNil(o.CacheCookie) {
		return nil, false
	}
	return o.CacheCookie, true
}

// HasCacheCookie returns a boolean if a field has been set.
func (o *PageRule) HasCacheCookie() bool {
	if o != nil && !IsNil(o.CacheCookie) {
		return true
	}

	return false
}

// SetCacheCookie gets a reference to the given string and assigns it to the CacheCookie field.
func (o *PageRule) SetCacheCookie(v string) {
	o.CacheCookie = &v
}

// GetCacheDeviceType returns the CacheDeviceType field value if set, zero value otherwise.
func (o *PageRule) GetCacheDeviceType() bool {
	if o == nil || IsNil(o.CacheDeviceType) {
		var ret bool
		return ret
	}
	return *o.CacheDeviceType
}

// GetCacheDeviceTypeOk returns a tuple with the CacheDeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheDeviceTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheDeviceType) {
		return nil, false
	}
	return o.CacheDeviceType, true
}

// HasCacheDeviceType returns a boolean if a field has been set.
func (o *PageRule) HasCacheDeviceType() bool {
	if o != nil && !IsNil(o.CacheDeviceType) {
		return true
	}

	return false
}

// SetCacheDeviceType gets a reference to the given bool and assigns it to the CacheDeviceType field.
func (o *PageRule) SetCacheDeviceType(v bool) {
	o.CacheDeviceType = &v
}

// GetCacheArgs returns the CacheArgs field value if set, zero value otherwise.
func (o *PageRule) GetCacheArgs() bool {
	if o == nil || IsNil(o.CacheArgs) {
		var ret bool
		return ret
	}
	return *o.CacheArgs
}

// GetCacheArgsOk returns a tuple with the CacheArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheArgsOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheArgs) {
		return nil, false
	}
	return o.CacheArgs, true
}

// HasCacheArgs returns a boolean if a field has been set.
func (o *PageRule) HasCacheArgs() bool {
	if o != nil && !IsNil(o.CacheArgs) {
		return true
	}

	return false
}

// SetCacheArgs gets a reference to the given bool and assigns it to the CacheArgs field.
func (o *PageRule) SetCacheArgs(v bool) {
	o.CacheArgs = &v
}

// GetCacheArg returns the CacheArg field value if set, zero value otherwise.
func (o *PageRule) GetCacheArg() string {
	if o == nil || IsNil(o.CacheArg) {
		var ret string
		return ret
	}
	return *o.CacheArg
}

// GetCacheArgOk returns a tuple with the CacheArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheArgOk() (*string, bool) {
	if o == nil || IsNil(o.CacheArg) {
		return nil, false
	}
	return o.CacheArg, true
}

// HasCacheArg returns a boolean if a field has been set.
func (o *PageRule) HasCacheArg() bool {
	if o != nil && !IsNil(o.CacheArg) {
		return true
	}

	return false
}

// SetCacheArg gets a reference to the given string and assigns it to the CacheArg field.
func (o *PageRule) SetCacheArg(v string) {
	o.CacheArg = &v
}

// GetCacheScheme returns the CacheScheme field value if set, zero value otherwise.
// Deprecated
func (o *PageRule) GetCacheScheme() bool {
	if o == nil || IsNil(o.CacheScheme) {
		var ret bool
		return ret
	}
	return *o.CacheScheme
}

// GetCacheSchemeOk returns a tuple with the CacheScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRule) GetCacheSchemeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheScheme) {
		return nil, false
	}
	return o.CacheScheme, true
}

// HasCacheScheme returns a boolean if a field has been set.
func (o *PageRule) HasCacheScheme() bool {
	if o != nil && !IsNil(o.CacheScheme) {
		return true
	}

	return false
}

// SetCacheScheme gets a reference to the given bool and assigns it to the CacheScheme field.
// Deprecated
func (o *PageRule) SetCacheScheme(v bool) {
	o.CacheScheme = &v
}

// GetCacheBrowser returns the CacheBrowser field value if set, zero value otherwise.
func (o *PageRule) GetCacheBrowser() string {
	if o == nil || IsNil(o.CacheBrowser) {
		var ret string
		return ret
	}
	return *o.CacheBrowser
}

// GetCacheBrowserOk returns a tuple with the CacheBrowser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheBrowserOk() (*string, bool) {
	if o == nil || IsNil(o.CacheBrowser) {
		return nil, false
	}
	return o.CacheBrowser, true
}

// HasCacheBrowser returns a boolean if a field has been set.
func (o *PageRule) HasCacheBrowser() bool {
	if o != nil && !IsNil(o.CacheBrowser) {
		return true
	}

	return false
}

// SetCacheBrowser gets a reference to the given string and assigns it to the CacheBrowser field.
func (o *PageRule) SetCacheBrowser(v string) {
	o.CacheBrowser = &v
}

// GetCacheIgnoreSc returns the CacheIgnoreSc field value if set, zero value otherwise.
func (o *PageRule) GetCacheIgnoreSc() bool {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreSc
}

// GetCacheIgnoreScOk returns a tuple with the CacheIgnoreSc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheIgnoreScOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		return nil, false
	}
	return o.CacheIgnoreSc, true
}

// HasCacheIgnoreSc returns a boolean if a field has been set.
func (o *PageRule) HasCacheIgnoreSc() bool {
	if o != nil && !IsNil(o.CacheIgnoreSc) {
		return true
	}

	return false
}

// SetCacheIgnoreSc gets a reference to the given bool and assigns it to the CacheIgnoreSc field.
func (o *PageRule) SetCacheIgnoreSc(v bool) {
	o.CacheIgnoreSc = &v
}

// GetCacheIgnoreVary returns the CacheIgnoreVary field value if set, zero value otherwise.
func (o *PageRule) GetCacheIgnoreVary() bool {
	if o == nil || IsNil(o.CacheIgnoreVary) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreVary
}

// GetCacheIgnoreVaryOk returns a tuple with the CacheIgnoreVary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheIgnoreVaryOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreVary) {
		return nil, false
	}
	return o.CacheIgnoreVary, true
}

// HasCacheIgnoreVary returns a boolean if a field has been set.
func (o *PageRule) HasCacheIgnoreVary() bool {
	if o != nil && !IsNil(o.CacheIgnoreVary) {
		return true
	}

	return false
}

// SetCacheIgnoreVary gets a reference to the given bool and assigns it to the CacheIgnoreVary field.
func (o *PageRule) SetCacheIgnoreVary(v bool) {
	o.CacheIgnoreVary = &v
}

// GetCacheIgnoreCc returns the CacheIgnoreCc field value if set, zero value otherwise.
func (o *PageRule) GetCacheIgnoreCc() bool {
	if o == nil || IsNil(o.CacheIgnoreCc) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreCc
}

// GetCacheIgnoreCcOk returns a tuple with the CacheIgnoreCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheIgnoreCcOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreCc) {
		return nil, false
	}
	return o.CacheIgnoreCc, true
}

// HasCacheIgnoreCc returns a boolean if a field has been set.
func (o *PageRule) HasCacheIgnoreCc() bool {
	if o != nil && !IsNil(o.CacheIgnoreCc) {
		return true
	}

	return false
}

// SetCacheIgnoreCc gets a reference to the given bool and assigns it to the CacheIgnoreCc field.
func (o *PageRule) SetCacheIgnoreCc(v bool) {
	o.CacheIgnoreCc = &v
}

// GetCorsHeader returns the CorsHeader field value if set, zero value otherwise.
func (o *PageRule) GetCorsHeader() string {
	if o == nil || IsNil(o.CorsHeader) {
		var ret string
		return ret
	}
	return *o.CorsHeader
}

// GetCorsHeaderOk returns a tuple with the CorsHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCorsHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.CorsHeader) {
		return nil, false
	}
	return o.CorsHeader, true
}

// HasCorsHeader returns a boolean if a field has been set.
func (o *PageRule) HasCorsHeader() bool {
	if o != nil && !IsNil(o.CorsHeader) {
		return true
	}

	return false
}

// SetCorsHeader gets a reference to the given string and assigns it to the CorsHeader field.
func (o *PageRule) SetCorsHeader(v string) {
	o.CorsHeader = &v
}

// GetRewriteUrl returns the RewriteUrl field value if set, zero value otherwise.
func (o *PageRule) GetRewriteUrl() string {
	if o == nil || IsNil(o.RewriteUrl) {
		var ret string
		return ret
	}
	return *o.RewriteUrl
}

// GetRewriteUrlOk returns a tuple with the RewriteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetRewriteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RewriteUrl) {
		return nil, false
	}
	return o.RewriteUrl, true
}

// HasRewriteUrl returns a boolean if a field has been set.
func (o *PageRule) HasRewriteUrl() bool {
	if o != nil && !IsNil(o.RewriteUrl) {
		return true
	}

	return false
}

// SetRewriteUrl gets a reference to the given string and assigns it to the RewriteUrl field.
func (o *PageRule) SetRewriteUrl(v string) {
	o.RewriteUrl = &v
}

// GetSlinkSecret returns the SlinkSecret field value if set, zero value otherwise.
func (o *PageRule) GetSlinkSecret() string {
	if o == nil || IsNil(o.SlinkSecret) {
		var ret string
		return ret
	}
	return *o.SlinkSecret
}

// GetSlinkSecretOk returns a tuple with the SlinkSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetSlinkSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SlinkSecret) {
		return nil, false
	}
	return o.SlinkSecret, true
}

// HasSlinkSecret returns a boolean if a field has been set.
func (o *PageRule) HasSlinkSecret() bool {
	if o != nil && !IsNil(o.SlinkSecret) {
		return true
	}

	return false
}

// SetSlinkSecret gets a reference to the given string and assigns it to the SlinkSecret field.
func (o *PageRule) SetSlinkSecret(v string) {
	o.SlinkSecret = &v
}

// GetSlinkMd5 returns the SlinkMd5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PageRule) GetSlinkMd5() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SlinkMd5
}

// GetSlinkMd5Ok returns a tuple with the SlinkMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PageRule) GetSlinkMd5Ok() ([]string, bool) {
	if o == nil || IsNil(o.SlinkMd5) {
		return nil, false
	}
	return o.SlinkMd5, true
}

// HasSlinkMd5 returns a boolean if a field has been set.
func (o *PageRule) HasSlinkMd5() bool {
	if o != nil && !IsNil(o.SlinkMd5) {
		return true
	}

	return false
}

// SetSlinkMd5 gets a reference to the given []string and assigns it to the SlinkMd5 field.
func (o *PageRule) SetSlinkMd5(v []string) {
	o.SlinkMd5 = v
}

// GetLoadBalancer returns the LoadBalancer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PageRule) GetLoadBalancer() string {
	if o == nil || IsNil(o.LoadBalancer.Get()) {
		var ret string
		return ret
	}
	return *o.LoadBalancer.Get()
}

// GetLoadBalancerOk returns a tuple with the LoadBalancer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PageRule) GetLoadBalancerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoadBalancer.Get(), o.LoadBalancer.IsSet()
}

// HasLoadBalancer returns a boolean if a field has been set.
func (o *PageRule) HasLoadBalancer() bool {
	if o != nil && o.LoadBalancer.IsSet() {
		return true
	}

	return false
}

// SetLoadBalancer gets a reference to the given NullableString and assigns it to the LoadBalancer field.
func (o *PageRule) SetLoadBalancer(v string) {
	o.LoadBalancer.Set(&v)
}
// SetLoadBalancerNil sets the value for LoadBalancer to be an explicit nil
func (o *PageRule) SetLoadBalancerNil() {
	o.LoadBalancer.Set(nil)
}

// UnsetLoadBalancer ensures that no value is present for LoadBalancer, not even an explicit nil
func (o *PageRule) UnsetLoadBalancer() {
	o.LoadBalancer.Unset()
}

// GetEdgeComputeId returns the EdgeComputeId field value if set, zero value otherwise.
func (o *PageRule) GetEdgeComputeId() string {
	if o == nil || IsNil(o.EdgeComputeId) {
		var ret string
		return ret
	}
	return *o.EdgeComputeId
}

// GetEdgeComputeIdOk returns a tuple with the EdgeComputeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetEdgeComputeIdOk() (*string, bool) {
	if o == nil || IsNil(o.EdgeComputeId) {
		return nil, false
	}
	return o.EdgeComputeId, true
}

// HasEdgeComputeId returns a boolean if a field has been set.
func (o *PageRule) HasEdgeComputeId() bool {
	if o != nil && !IsNil(o.EdgeComputeId) {
		return true
	}

	return false
}

// SetEdgeComputeId gets a reference to the given string and assigns it to the EdgeComputeId field.
func (o *PageRule) SetEdgeComputeId(v string) {
	o.EdgeComputeId = &v
}

// GetClusterStatus returns the ClusterStatus field value if set, zero value otherwise.
// Deprecated
func (o *PageRule) GetClusterStatus() bool {
	if o == nil || IsNil(o.ClusterStatus) {
		var ret bool
		return ret
	}
	return *o.ClusterStatus
}

// GetClusterStatusOk returns a tuple with the ClusterStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRule) GetClusterStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusterStatus) {
		return nil, false
	}
	return o.ClusterStatus, true
}

// HasClusterStatus returns a boolean if a field has been set.
func (o *PageRule) HasClusterStatus() bool {
	if o != nil && !IsNil(o.ClusterStatus) {
		return true
	}

	return false
}

// SetClusterStatus gets a reference to the given bool and assigns it to the ClusterStatus field.
// Deprecated
func (o *PageRule) SetClusterStatus(v bool) {
	o.ClusterStatus = &v
}

// GetImageResize returns the ImageResize field value if set, zero value otherwise.
func (o *PageRule) GetImageResize() PageRuleImageResize {
	if o == nil || IsNil(o.ImageResize) {
		var ret PageRuleImageResize
		return ret
	}
	return *o.ImageResize
}

// GetImageResizeOk returns a tuple with the ImageResize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetImageResizeOk() (*PageRuleImageResize, bool) {
	if o == nil || IsNil(o.ImageResize) {
		return nil, false
	}
	return o.ImageResize, true
}

// HasImageResize returns a boolean if a field has been set.
func (o *PageRule) HasImageResize() bool {
	if o != nil && !IsNil(o.ImageResize) {
		return true
	}

	return false
}

// SetImageResize gets a reference to the given PageRuleImageResize and assigns it to the ImageResize field.
func (o *PageRule) SetImageResize(v PageRuleImageResize) {
	o.ImageResize = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *PageRule) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret string
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *PageRule) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *PageRule) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableString and assigns it to the ClusterId field.
// Deprecated
func (o *PageRule) SetClusterId(v string) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *PageRule) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *PageRule) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetUpstreamTimeout returns the UpstreamTimeout field value if set, zero value otherwise.
func (o *PageRule) GetUpstreamTimeout() UpstreamTimeout {
	if o == nil || IsNil(o.UpstreamTimeout) {
		var ret UpstreamTimeout
		return ret
	}
	return *o.UpstreamTimeout
}

// GetUpstreamTimeoutOk returns a tuple with the UpstreamTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetUpstreamTimeoutOk() (*UpstreamTimeout, bool) {
	if o == nil || IsNil(o.UpstreamTimeout) {
		return nil, false
	}
	return o.UpstreamTimeout, true
}

// HasUpstreamTimeout returns a boolean if a field has been set.
func (o *PageRule) HasUpstreamTimeout() bool {
	if o != nil && !IsNil(o.UpstreamTimeout) {
		return true
	}

	return false
}

// SetUpstreamTimeout gets a reference to the given UpstreamTimeout and assigns it to the UpstreamTimeout field.
func (o *PageRule) SetUpstreamTimeout(v UpstreamTimeout) {
	o.UpstreamTimeout = &v
}

// GetReqCustomHeaders returns the ReqCustomHeaders field value if set, zero value otherwise.
func (o *PageRule) GetReqCustomHeaders() []map[string]interface{} {
	if o == nil || IsNil(o.ReqCustomHeaders) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ReqCustomHeaders
}

// GetReqCustomHeadersOk returns a tuple with the ReqCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetReqCustomHeadersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReqCustomHeaders) {
		return nil, false
	}
	return o.ReqCustomHeaders, true
}

// HasReqCustomHeaders returns a boolean if a field has been set.
func (o *PageRule) HasReqCustomHeaders() bool {
	if o != nil && !IsNil(o.ReqCustomHeaders) {
		return true
	}

	return false
}

// SetReqCustomHeaders gets a reference to the given []map[string]interface{} and assigns it to the ReqCustomHeaders field.
func (o *PageRule) SetReqCustomHeaders(v []map[string]interface{}) {
	o.ReqCustomHeaders = v
}

// GetResCustomHeaders returns the ResCustomHeaders field value if set, zero value otherwise.
func (o *PageRule) GetResCustomHeaders() []map[string]interface{} {
	if o == nil || IsNil(o.ResCustomHeaders) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ResCustomHeaders
}

// GetResCustomHeadersOk returns a tuple with the ResCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetResCustomHeadersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResCustomHeaders) {
		return nil, false
	}
	return o.ResCustomHeaders, true
}

// HasResCustomHeaders returns a boolean if a field has been set.
func (o *PageRule) HasResCustomHeaders() bool {
	if o != nil && !IsNil(o.ResCustomHeaders) {
		return true
	}

	return false
}

// SetResCustomHeaders gets a reference to the given []map[string]interface{} and assigns it to the ResCustomHeaders field.
func (o *PageRule) SetResCustomHeaders(v []map[string]interface{}) {
	o.ResCustomHeaders = v
}

// GetReqHideHeaders returns the ReqHideHeaders field value if set, zero value otherwise.
func (o *PageRule) GetReqHideHeaders() []string {
	if o == nil || IsNil(o.ReqHideHeaders) {
		var ret []string
		return ret
	}
	return o.ReqHideHeaders
}

// GetReqHideHeadersOk returns a tuple with the ReqHideHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetReqHideHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ReqHideHeaders) {
		return nil, false
	}
	return o.ReqHideHeaders, true
}

// HasReqHideHeaders returns a boolean if a field has been set.
func (o *PageRule) HasReqHideHeaders() bool {
	if o != nil && !IsNil(o.ReqHideHeaders) {
		return true
	}

	return false
}

// SetReqHideHeaders gets a reference to the given []string and assigns it to the ReqHideHeaders field.
func (o *PageRule) SetReqHideHeaders(v []string) {
	o.ReqHideHeaders = v
}

// GetResHideHeaders returns the ResHideHeaders field value if set, zero value otherwise.
func (o *PageRule) GetResHideHeaders() []string {
	if o == nil || IsNil(o.ResHideHeaders) {
		var ret []string
		return ret
	}
	return o.ResHideHeaders
}

// GetResHideHeadersOk returns a tuple with the ResHideHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetResHideHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ResHideHeaders) {
		return nil, false
	}
	return o.ResHideHeaders, true
}

// HasResHideHeaders returns a boolean if a field has been set.
func (o *PageRule) HasResHideHeaders() bool {
	if o != nil && !IsNil(o.ResHideHeaders) {
		return true
	}

	return false
}

// SetResHideHeaders gets a reference to the given []string and assigns it to the ResHideHeaders field.
func (o *PageRule) SetResHideHeaders(v []string) {
	o.ResHideHeaders = v
}

// GetCustomHostHeader returns the CustomHostHeader field value if set, zero value otherwise.
func (o *PageRule) GetCustomHostHeader() string {
	if o == nil || IsNil(o.CustomHostHeader) {
		var ret string
		return ret
	}
	return *o.CustomHostHeader
}

// GetCustomHostHeaderOk returns a tuple with the CustomHostHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCustomHostHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.CustomHostHeader) {
		return nil, false
	}
	return o.CustomHostHeader, true
}

// HasCustomHostHeader returns a boolean if a field has been set.
func (o *PageRule) HasCustomHostHeader() bool {
	if o != nil && !IsNil(o.CustomHostHeader) {
		return true
	}

	return false
}

// SetCustomHostHeader gets a reference to the given string and assigns it to the CustomHostHeader field.
func (o *PageRule) SetCustomHostHeader(v string) {
	o.CustomHostHeader = &v
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *PageRule) GetRedirect() PageRuleRedirect {
	if o == nil || IsNil(o.Redirect) {
		var ret PageRuleRedirect
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetRedirectOk() (*PageRuleRedirect, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *PageRule) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given PageRuleRedirect and assigns it to the Redirect field.
func (o *PageRule) SetRedirect(v PageRuleRedirect) {
	o.Redirect = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PageRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PageRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PageRule) SetId(v string) {
	o.Id = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *PageRule) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *PageRule) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *PageRule) SetDomainId(v string) {
	o.DomainId = &v
}

// GetSeq returns the Seq field value if set, zero value otherwise.
func (o *PageRule) GetSeq() int32 {
	if o == nil || IsNil(o.Seq) {
		var ret int32
		return ret
	}
	return *o.Seq
}

// GetSeqOk returns a tuple with the Seq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetSeqOk() (*int32, bool) {
	if o == nil || IsNil(o.Seq) {
		return nil, false
	}
	return o.Seq, true
}

// HasSeq returns a boolean if a field has been set.
func (o *PageRule) HasSeq() bool {
	if o != nil && !IsNil(o.Seq) {
		return true
	}

	return false
}

// SetSeq gets a reference to the given int32 and assigns it to the Seq field.
func (o *PageRule) SetSeq(v int32) {
	o.Seq = &v
}

// GetUrlType returns the UrlType field value if set, zero value otherwise.
// Deprecated
func (o *PageRule) GetUrlType() string {
	if o == nil || IsNil(o.UrlType) {
		var ret string
		return ret
	}
	return *o.UrlType
}

// GetUrlTypeOk returns a tuple with the UrlType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRule) GetUrlTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UrlType) {
		return nil, false
	}
	return o.UrlType, true
}

// HasUrlType returns a boolean if a field has been set.
func (o *PageRule) HasUrlType() bool {
	if o != nil && !IsNil(o.UrlType) {
		return true
	}

	return false
}

// SetUrlType gets a reference to the given string and assigns it to the UrlType field.
// Deprecated
func (o *PageRule) SetUrlType(v string) {
	o.UrlType = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *PageRule) GetIsProtected() bool {
	if o == nil || IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetIsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *PageRule) HasIsProtected() bool {
	if o != nil && !IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *PageRule) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PageRule) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PageRule) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PageRule) SetUrl(v string) {
	o.Url = &v
}

// GetCacheLevel returns the CacheLevel field value if set, zero value otherwise.
func (o *PageRule) GetCacheLevel() string {
	if o == nil || IsNil(o.CacheLevel) {
		var ret string
		return ret
	}
	return *o.CacheLevel
}

// GetCacheLevelOk returns a tuple with the CacheLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCacheLevelOk() (*string, bool) {
	if o == nil || IsNil(o.CacheLevel) {
		return nil, false
	}
	return o.CacheLevel, true
}

// HasCacheLevel returns a boolean if a field has been set.
func (o *PageRule) HasCacheLevel() bool {
	if o != nil && !IsNil(o.CacheLevel) {
		return true
	}

	return false
}

// SetCacheLevel gets a reference to the given string and assigns it to the CacheLevel field.
func (o *PageRule) SetCacheLevel(v string) {
	o.CacheLevel = &v
}

// GetWafStatus returns the WafStatus field value if set, zero value otherwise.
func (o *PageRule) GetWafStatus() bool {
	if o == nil || IsNil(o.WafStatus) {
		var ret bool
		return ret
	}
	return *o.WafStatus
}

// GetWafStatusOk returns a tuple with the WafStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetWafStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.WafStatus) {
		return nil, false
	}
	return o.WafStatus, true
}

// HasWafStatus returns a boolean if a field has been set.
func (o *PageRule) HasWafStatus() bool {
	if o != nil && !IsNil(o.WafStatus) {
		return true
	}

	return false
}

// SetWafStatus gets a reference to the given bool and assigns it to the WafStatus field.
func (o *PageRule) SetWafStatus(v bool) {
	o.WafStatus = &v
}

// GetFwStatus returns the FwStatus field value if set, zero value otherwise.
// Deprecated
func (o *PageRule) GetFwStatus() bool {
	if o == nil || IsNil(o.FwStatus) {
		var ret bool
		return ret
	}
	return *o.FwStatus
}

// GetFwStatusOk returns a tuple with the FwStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRule) GetFwStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.FwStatus) {
		return nil, false
	}
	return o.FwStatus, true
}

// HasFwStatus returns a boolean if a field has been set.
func (o *PageRule) HasFwStatus() bool {
	if o != nil && !IsNil(o.FwStatus) {
		return true
	}

	return false
}

// SetFwStatus gets a reference to the given bool and assigns it to the FwStatus field.
// Deprecated
func (o *PageRule) SetFwStatus(v bool) {
	o.FwStatus = &v
}

// GetAcceleration returns the Acceleration field value if set, zero value otherwise.
func (o *PageRule) GetAcceleration() Acceleration {
	if o == nil || IsNil(o.Acceleration) {
		var ret Acceleration
		return ret
	}
	return *o.Acceleration
}

// GetAccelerationOk returns a tuple with the Acceleration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetAccelerationOk() (*Acceleration, bool) {
	if o == nil || IsNil(o.Acceleration) {
		return nil, false
	}
	return o.Acceleration, true
}

// HasAcceleration returns a boolean if a field has been set.
func (o *PageRule) HasAcceleration() bool {
	if o != nil && !IsNil(o.Acceleration) {
		return true
	}

	return false
}

// SetAcceleration gets a reference to the given Acceleration and assigns it to the Acceleration field.
func (o *PageRule) SetAcceleration(v Acceleration) {
	o.Acceleration = &v
}

// GetSlinkStatus returns the SlinkStatus field value if set, zero value otherwise.
func (o *PageRule) GetSlinkStatus() bool {
	if o == nil || IsNil(o.SlinkStatus) {
		var ret bool
		return ret
	}
	return *o.SlinkStatus
}

// GetSlinkStatusOk returns a tuple with the SlinkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetSlinkStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.SlinkStatus) {
		return nil, false
	}
	return o.SlinkStatus, true
}

// HasSlinkStatus returns a boolean if a field has been set.
func (o *PageRule) HasSlinkStatus() bool {
	if o != nil && !IsNil(o.SlinkStatus) {
		return true
	}

	return false
}

// SetSlinkStatus gets a reference to the given bool and assigns it to the SlinkStatus field.
func (o *PageRule) SetSlinkStatus(v bool) {
	o.SlinkStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PageRule) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PageRule) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *PageRule) SetStatus(v bool) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PageRule) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PageRule) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PageRule) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PageRule) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRule) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PageRule) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PageRule) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o PageRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache200) {
		toSerialize["cache_200"] = o.Cache200
	}
	if !IsNil(o.CacheAny) {
		toSerialize["cache_any"] = o.CacheAny
	}
	if !IsNil(o.CacheCookie) {
		toSerialize["cache_cookie"] = o.CacheCookie
	}
	if !IsNil(o.CacheDeviceType) {
		toSerialize["cache_device_type"] = o.CacheDeviceType
	}
	if !IsNil(o.CacheArgs) {
		toSerialize["cache_args"] = o.CacheArgs
	}
	if !IsNil(o.CacheArg) {
		toSerialize["cache_arg"] = o.CacheArg
	}
	if !IsNil(o.CacheScheme) {
		toSerialize["cache_scheme"] = o.CacheScheme
	}
	if !IsNil(o.CacheBrowser) {
		toSerialize["cache_browser"] = o.CacheBrowser
	}
	if !IsNil(o.CacheIgnoreSc) {
		toSerialize["cache_ignore_sc"] = o.CacheIgnoreSc
	}
	if !IsNil(o.CacheIgnoreVary) {
		toSerialize["cache_ignore_vary"] = o.CacheIgnoreVary
	}
	if !IsNil(o.CacheIgnoreCc) {
		toSerialize["cache_ignore_cc"] = o.CacheIgnoreCc
	}
	if !IsNil(o.CorsHeader) {
		toSerialize["cors_header"] = o.CorsHeader
	}
	if !IsNil(o.RewriteUrl) {
		toSerialize["rewrite_url"] = o.RewriteUrl
	}
	if !IsNil(o.SlinkSecret) {
		toSerialize["slink_secret"] = o.SlinkSecret
	}
	if o.SlinkMd5 != nil {
		toSerialize["slink_md5"] = o.SlinkMd5
	}
	if o.LoadBalancer.IsSet() {
		toSerialize["load_balancer"] = o.LoadBalancer.Get()
	}
	if !IsNil(o.EdgeComputeId) {
		toSerialize["edge_compute_id"] = o.EdgeComputeId
	}
	if !IsNil(o.ClusterStatus) {
		toSerialize["cluster_status"] = o.ClusterStatus
	}
	if !IsNil(o.ImageResize) {
		toSerialize["image_resize"] = o.ImageResize
	}
	if o.ClusterId.IsSet() {
		toSerialize["cluster_id"] = o.ClusterId.Get()
	}
	if !IsNil(o.UpstreamTimeout) {
		toSerialize["upstream_timeout"] = o.UpstreamTimeout
	}
	if !IsNil(o.ReqCustomHeaders) {
		toSerialize["req_custom_headers"] = o.ReqCustomHeaders
	}
	if !IsNil(o.ResCustomHeaders) {
		toSerialize["res_custom_headers"] = o.ResCustomHeaders
	}
	if !IsNil(o.ReqHideHeaders) {
		toSerialize["req_hide_headers"] = o.ReqHideHeaders
	}
	if !IsNil(o.ResHideHeaders) {
		toSerialize["res_hide_headers"] = o.ResHideHeaders
	}
	if !IsNil(o.CustomHostHeader) {
		toSerialize["custom_host_header"] = o.CustomHostHeader
	}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DomainId) {
		toSerialize["domain_id"] = o.DomainId
	}
	if !IsNil(o.Seq) {
		toSerialize["seq"] = o.Seq
	}
	if !IsNil(o.UrlType) {
		toSerialize["url_type"] = o.UrlType
	}
	if !IsNil(o.IsProtected) {
		toSerialize["is_protected"] = o.IsProtected
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.CacheLevel) {
		toSerialize["cache_level"] = o.CacheLevel
	}
	if !IsNil(o.WafStatus) {
		toSerialize["waf_status"] = o.WafStatus
	}
	if !IsNil(o.FwStatus) {
		toSerialize["fw_status"] = o.FwStatus
	}
	if !IsNil(o.Acceleration) {
		toSerialize["acceleration"] = o.Acceleration
	}
	if !IsNil(o.SlinkStatus) {
		toSerialize["slink_status"] = o.SlinkStatus
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullablePageRule struct {
	value *PageRule
	isSet bool
}

func (v NullablePageRule) Get() *PageRule {
	return v.value
}

func (v *NullablePageRule) Set(val *PageRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePageRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePageRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageRule(val *PageRule) *NullablePageRule {
	return &NullablePageRule{value: val, isSet: true}
}

func (v NullablePageRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the ErrorLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorLog{}

// ErrorLog struct for ErrorLog
type ErrorLog struct {
	// The error message
	Name *string `json:"name,omitempty"`
	// The error's count
	Count *int64 `json:"count,omitempty"`
	Upstreams []ErrorLogUpstreamsInner `json:"upstreams,omitempty"`
}

// NewErrorLog instantiates a new ErrorLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorLog() *ErrorLog {
	this := ErrorLog{}
	return &this
}

// NewErrorLogWithDefaults instantiates a new ErrorLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorLogWithDefaults() *ErrorLog {
	this := ErrorLog{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ErrorLog) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorLog) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ErrorLog) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ErrorLog) SetName(v string) {
	o.Name = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ErrorLog) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorLog) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ErrorLog) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *ErrorLog) SetCount(v int64) {
	o.Count = &v
}

// GetUpstreams returns the Upstreams field value if set, zero value otherwise.
func (o *ErrorLog) GetUpstreams() []ErrorLogUpstreamsInner {
	if o == nil || IsNil(o.Upstreams) {
		var ret []ErrorLogUpstreamsInner
		return ret
	}
	return o.Upstreams
}

// GetUpstreamsOk returns a tuple with the Upstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorLog) GetUpstreamsOk() ([]ErrorLogUpstreamsInner, bool) {
	if o == nil || IsNil(o.Upstreams) {
		return nil, false
	}
	return o.Upstreams, true
}

// HasUpstreams returns a boolean if a field has been set.
func (o *ErrorLog) HasUpstreams() bool {
	if o != nil && !IsNil(o.Upstreams) {
		return true
	}

	return false
}

// SetUpstreams gets a reference to the given []ErrorLogUpstreamsInner and assigns it to the Upstreams field.
func (o *ErrorLog) SetUpstreams(v []ErrorLogUpstreamsInner) {
	o.Upstreams = v
}

func (o ErrorLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Upstreams) {
		toSerialize["upstreams"] = o.Upstreams
	}
	return toSerialize, nil
}

type NullableErrorLog struct {
	value *ErrorLog
	isSet bool
}

func (v NullableErrorLog) Get() *ErrorLog {
	return v.value
}

func (v *NullableErrorLog) Set(val *ErrorLog) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorLog) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorLog(val *ErrorLog) *NullableErrorLog {
	return &NullableErrorLog{value: val, isSet: true}
}

func (v NullableErrorLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



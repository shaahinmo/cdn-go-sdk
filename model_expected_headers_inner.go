/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExpectedHeadersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpectedHeadersInner{}

// ExpectedHeadersInner struct for ExpectedHeadersInner
type ExpectedHeadersInner struct {
	Key string `json:"key"`
	Value []string `json:"value"`
}

type _ExpectedHeadersInner ExpectedHeadersInner

// NewExpectedHeadersInner instantiates a new ExpectedHeadersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpectedHeadersInner(key string, value []string) *ExpectedHeadersInner {
	this := ExpectedHeadersInner{}
	this.Key = key
	this.Value = value
	return &this
}

// NewExpectedHeadersInnerWithDefaults instantiates a new ExpectedHeadersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpectedHeadersInnerWithDefaults() *ExpectedHeadersInner {
	this := ExpectedHeadersInner{}
	return &this
}

// GetKey returns the Key field value
func (o *ExpectedHeadersInner) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ExpectedHeadersInner) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ExpectedHeadersInner) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ExpectedHeadersInner) GetValue() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ExpectedHeadersInner) GetValueOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *ExpectedHeadersInner) SetValue(v []string) {
	o.Value = v
}

func (o ExpectedHeadersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpectedHeadersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ExpectedHeadersInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpectedHeadersInner := _ExpectedHeadersInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExpectedHeadersInner)

	if err != nil {
		return err
	}

	*o = ExpectedHeadersInner(varExpectedHeadersInner)

	return err
}

type NullableExpectedHeadersInner struct {
	value *ExpectedHeadersInner
	isSet bool
}

func (v NullableExpectedHeadersInner) Get() *ExpectedHeadersInner {
	return v.value
}

func (v *NullableExpectedHeadersInner) Set(val *ExpectedHeadersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExpectedHeadersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExpectedHeadersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpectedHeadersInner(val *ExpectedHeadersInner) *NullableExpectedHeadersInner {
	return &NullableExpectedHeadersInner{value: val, isSet: true}
}

func (v NullableExpectedHeadersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpectedHeadersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



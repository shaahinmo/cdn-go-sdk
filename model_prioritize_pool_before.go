/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrioritizePoolBefore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrioritizePoolBefore{}

// PrioritizePoolBefore struct for PrioritizePoolBefore
type PrioritizePoolBefore struct {
	// ID of the pool you want to move
	PoolId string `json:"pool_id"`
	// ID of the pool you want to follow the selected pool
	BeforePoolId string `json:"before_pool_id"`
}

type _PrioritizePoolBefore PrioritizePoolBefore

// NewPrioritizePoolBefore instantiates a new PrioritizePoolBefore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrioritizePoolBefore(poolId string, beforePoolId string) *PrioritizePoolBefore {
	this := PrioritizePoolBefore{}
	this.PoolId = poolId
	this.BeforePoolId = beforePoolId
	return &this
}

// NewPrioritizePoolBeforeWithDefaults instantiates a new PrioritizePoolBefore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrioritizePoolBeforeWithDefaults() *PrioritizePoolBefore {
	this := PrioritizePoolBefore{}
	return &this
}

// GetPoolId returns the PoolId field value
func (o *PrioritizePoolBefore) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *PrioritizePoolBefore) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *PrioritizePoolBefore) SetPoolId(v string) {
	o.PoolId = v
}

// GetBeforePoolId returns the BeforePoolId field value
func (o *PrioritizePoolBefore) GetBeforePoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeforePoolId
}

// GetBeforePoolIdOk returns a tuple with the BeforePoolId field value
// and a boolean to check if the value has been set.
func (o *PrioritizePoolBefore) GetBeforePoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeforePoolId, true
}

// SetBeforePoolId sets field value
func (o *PrioritizePoolBefore) SetBeforePoolId(v string) {
	o.BeforePoolId = v
}

func (o PrioritizePoolBefore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrioritizePoolBefore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_id"] = o.PoolId
	toSerialize["before_pool_id"] = o.BeforePoolId
	return toSerialize, nil
}

func (o *PrioritizePoolBefore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pool_id",
		"before_pool_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrioritizePoolBefore := _PrioritizePoolBefore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrioritizePoolBefore)

	if err != nil {
		return err
	}

	*o = PrioritizePoolBefore(varPrioritizePoolBefore)

	return err
}

type NullablePrioritizePoolBefore struct {
	value *PrioritizePoolBefore
	isSet bool
}

func (v NullablePrioritizePoolBefore) Get() *PrioritizePoolBefore {
	return v.value
}

func (v *NullablePrioritizePoolBefore) Set(val *PrioritizePoolBefore) {
	v.value = val
	v.isSet = true
}

func (v NullablePrioritizePoolBefore) IsSet() bool {
	return v.isSet
}

func (v *NullablePrioritizePoolBefore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrioritizePoolBefore(val *PrioritizePoolBefore) *NullablePrioritizePoolBefore {
	return &NullablePrioritizePoolBefore{value: val, isSet: true}
}

func (v NullablePrioritizePoolBefore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrioritizePoolBefore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the LogForwarderS3ConnectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogForwarderS3ConnectionType{}

// LogForwarderS3ConnectionType ArvanS3, AmazonS3, AlibabaS3 and Custom S3 connections
type LogForwarderS3ConnectionType struct {
	SampleRate *int32 `json:"sample_rate,omitempty"`
	S3Endpoint *string `json:"s3_endpoint,omitempty"`
	AccessKey *string `json:"access_key,omitempty"`
	SecretKey *string `json:"secret_key,omitempty"`
	BucketName *string `json:"bucket_name,omitempty"`
	ObjectSize *int32 `json:"object_size,omitempty"`
	Region *string `json:"region,omitempty"`
	FlushInterval *int32 `json:"flush_interval,omitempty"`
}

// NewLogForwarderS3ConnectionType instantiates a new LogForwarderS3ConnectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogForwarderS3ConnectionType() *LogForwarderS3ConnectionType {
	this := LogForwarderS3ConnectionType{}
	return &this
}

// NewLogForwarderS3ConnectionTypeWithDefaults instantiates a new LogForwarderS3ConnectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogForwarderS3ConnectionTypeWithDefaults() *LogForwarderS3ConnectionType {
	this := LogForwarderS3ConnectionType{}
	return &this
}

// GetSampleRate returns the SampleRate field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetSampleRate() int32 {
	if o == nil || IsNil(o.SampleRate) {
		var ret int32
		return ret
	}
	return *o.SampleRate
}

// GetSampleRateOk returns a tuple with the SampleRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetSampleRateOk() (*int32, bool) {
	if o == nil || IsNil(o.SampleRate) {
		return nil, false
	}
	return o.SampleRate, true
}

// HasSampleRate returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasSampleRate() bool {
	if o != nil && !IsNil(o.SampleRate) {
		return true
	}

	return false
}

// SetSampleRate gets a reference to the given int32 and assigns it to the SampleRate field.
func (o *LogForwarderS3ConnectionType) SetSampleRate(v int32) {
	o.SampleRate = &v
}

// GetS3Endpoint returns the S3Endpoint field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetS3Endpoint() string {
	if o == nil || IsNil(o.S3Endpoint) {
		var ret string
		return ret
	}
	return *o.S3Endpoint
}

// GetS3EndpointOk returns a tuple with the S3Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetS3EndpointOk() (*string, bool) {
	if o == nil || IsNil(o.S3Endpoint) {
		return nil, false
	}
	return o.S3Endpoint, true
}

// HasS3Endpoint returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasS3Endpoint() bool {
	if o != nil && !IsNil(o.S3Endpoint) {
		return true
	}

	return false
}

// SetS3Endpoint gets a reference to the given string and assigns it to the S3Endpoint field.
func (o *LogForwarderS3ConnectionType) SetS3Endpoint(v string) {
	o.S3Endpoint = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *LogForwarderS3ConnectionType) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *LogForwarderS3ConnectionType) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *LogForwarderS3ConnectionType) SetBucketName(v string) {
	o.BucketName = &v
}

// GetObjectSize returns the ObjectSize field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetObjectSize() int32 {
	if o == nil || IsNil(o.ObjectSize) {
		var ret int32
		return ret
	}
	return *o.ObjectSize
}

// GetObjectSizeOk returns a tuple with the ObjectSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetObjectSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.ObjectSize) {
		return nil, false
	}
	return o.ObjectSize, true
}

// HasObjectSize returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasObjectSize() bool {
	if o != nil && !IsNil(o.ObjectSize) {
		return true
	}

	return false
}

// SetObjectSize gets a reference to the given int32 and assigns it to the ObjectSize field.
func (o *LogForwarderS3ConnectionType) SetObjectSize(v int32) {
	o.ObjectSize = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *LogForwarderS3ConnectionType) SetRegion(v string) {
	o.Region = &v
}

// GetFlushInterval returns the FlushInterval field value if set, zero value otherwise.
func (o *LogForwarderS3ConnectionType) GetFlushInterval() int32 {
	if o == nil || IsNil(o.FlushInterval) {
		var ret int32
		return ret
	}
	return *o.FlushInterval
}

// GetFlushIntervalOk returns a tuple with the FlushInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarderS3ConnectionType) GetFlushIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.FlushInterval) {
		return nil, false
	}
	return o.FlushInterval, true
}

// HasFlushInterval returns a boolean if a field has been set.
func (o *LogForwarderS3ConnectionType) HasFlushInterval() bool {
	if o != nil && !IsNil(o.FlushInterval) {
		return true
	}

	return false
}

// SetFlushInterval gets a reference to the given int32 and assigns it to the FlushInterval field.
func (o *LogForwarderS3ConnectionType) SetFlushInterval(v int32) {
	o.FlushInterval = &v
}

func (o LogForwarderS3ConnectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogForwarderS3ConnectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SampleRate) {
		toSerialize["sample_rate"] = o.SampleRate
	}
	if !IsNil(o.S3Endpoint) {
		toSerialize["s3_endpoint"] = o.S3Endpoint
	}
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	if !IsNil(o.BucketName) {
		toSerialize["bucket_name"] = o.BucketName
	}
	if !IsNil(o.ObjectSize) {
		toSerialize["object_size"] = o.ObjectSize
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.FlushInterval) {
		toSerialize["flush_interval"] = o.FlushInterval
	}
	return toSerialize, nil
}

type NullableLogForwarderS3ConnectionType struct {
	value *LogForwarderS3ConnectionType
	isSet bool
}

func (v NullableLogForwarderS3ConnectionType) Get() *LogForwarderS3ConnectionType {
	return v.value
}

func (v *NullableLogForwarderS3ConnectionType) Set(val *LogForwarderS3ConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogForwarderS3ConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogForwarderS3ConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogForwarderS3ConnectionType(val *LogForwarderS3ConnectionType) *NullableLogForwarderS3ConnectionType {
	return &NullableLogForwarderS3ConnectionType{value: val, isSet: true}
}

func (v NullableLogForwarderS3ConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogForwarderS3ConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



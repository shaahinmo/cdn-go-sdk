/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DynamicField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicField{}

// DynamicField struct for DynamicField
type DynamicField struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Type string `json:"type"`
	Scope *string `json:"scope,omitempty"`
	Values []DynamicFieldValue `json:"values"`
	AllowedPlans []int32 `json:"allowed_plans,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _DynamicField DynamicField

// NewDynamicField instantiates a new DynamicField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicField(name string, type_ string, values []DynamicFieldValue) *DynamicField {
	this := DynamicField{}
	this.Name = name
	this.Type = type_
	this.Values = values
	return &this
}

// NewDynamicFieldWithDefaults instantiates a new DynamicField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicFieldWithDefaults() *DynamicField {
	this := DynamicField{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DynamicField) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DynamicField) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DynamicField) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DynamicField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DynamicField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DynamicField) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DynamicField) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DynamicField) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DynamicField) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DynamicField) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DynamicField) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DynamicField) UnsetDescription() {
	o.Description.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *DynamicField) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *DynamicField) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *DynamicField) SetNamespace(v string) {
	o.Namespace = &v
}

// GetType returns the Type field value
func (o *DynamicField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DynamicField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DynamicField) SetType(v string) {
	o.Type = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *DynamicField) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *DynamicField) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *DynamicField) SetScope(v string) {
	o.Scope = &v
}

// GetValues returns the Values field value
func (o *DynamicField) GetValues() []DynamicFieldValue {
	if o == nil {
		var ret []DynamicFieldValue
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *DynamicField) GetValuesOk() ([]DynamicFieldValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *DynamicField) SetValues(v []DynamicFieldValue) {
	o.Values = v
}

// GetAllowedPlans returns the AllowedPlans field value if set, zero value otherwise.
func (o *DynamicField) GetAllowedPlans() []int32 {
	if o == nil || IsNil(o.AllowedPlans) {
		var ret []int32
		return ret
	}
	return o.AllowedPlans
}

// GetAllowedPlansOk returns a tuple with the AllowedPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetAllowedPlansOk() ([]int32, bool) {
	if o == nil || IsNil(o.AllowedPlans) {
		return nil, false
	}
	return o.AllowedPlans, true
}

// HasAllowedPlans returns a boolean if a field has been set.
func (o *DynamicField) HasAllowedPlans() bool {
	if o != nil && !IsNil(o.AllowedPlans) {
		return true
	}

	return false
}

// SetAllowedPlans gets a reference to the given []int32 and assigns it to the AllowedPlans field.
func (o *DynamicField) SetAllowedPlans(v []int32) {
	o.AllowedPlans = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DynamicField) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DynamicField) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DynamicField) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DynamicField) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicField) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DynamicField) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DynamicField) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DynamicField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	toSerialize["values"] = o.Values
	if !IsNil(o.AllowedPlans) {
		toSerialize["allowed_plans"] = o.AllowedPlans
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *DynamicField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDynamicField := _DynamicField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDynamicField)

	if err != nil {
		return err
	}

	*o = DynamicField(varDynamicField)

	return err
}

type NullableDynamicField struct {
	value *DynamicField
	isSet bool
}

func (v NullableDynamicField) Get() *DynamicField {
	return v.value
}

func (v *NullableDynamicField) Set(val *DynamicField) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicField) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicField(val *DynamicField) *NullableDynamicField {
	return &NullableDynamicField{value: val, isSet: true}
}

func (v NullableDynamicField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the NextUpstreamTcpCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextUpstreamTcpCodes{}

// NextUpstreamTcpCodes Status codes from the upstream that trigger a switch to the next upstream
type NextUpstreamTcpCodes struct {
	Head []float32 `json:"head,omitempty"`
	Get []float32 `json:"get,omitempty"`
	Post []float32 `json:"post,omitempty"`
	Put []float32 `json:"put,omitempty"`
	Delete []float32 `json:"delete,omitempty"`
	Options []float32 `json:"options,omitempty"`
	Patch []float32 `json:"patch,omitempty"`
}

// NewNextUpstreamTcpCodes instantiates a new NextUpstreamTcpCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextUpstreamTcpCodes() *NextUpstreamTcpCodes {
	this := NextUpstreamTcpCodes{}
	return &this
}

// NewNextUpstreamTcpCodesWithDefaults instantiates a new NextUpstreamTcpCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextUpstreamTcpCodesWithDefaults() *NextUpstreamTcpCodes {
	this := NextUpstreamTcpCodes{}
	return &this
}

// GetHead returns the Head field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetHead() []float32 {
	if o == nil || IsNil(o.Head) {
		var ret []float32
		return ret
	}
	return o.Head
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetHeadOk() ([]float32, bool) {
	if o == nil || IsNil(o.Head) {
		return nil, false
	}
	return o.Head, true
}

// HasHead returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasHead() bool {
	if o != nil && !IsNil(o.Head) {
		return true
	}

	return false
}

// SetHead gets a reference to the given []float32 and assigns it to the Head field.
func (o *NextUpstreamTcpCodes) SetHead(v []float32) {
	o.Head = v
}

// GetGet returns the Get field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetGet() []float32 {
	if o == nil || IsNil(o.Get) {
		var ret []float32
		return ret
	}
	return o.Get
}

// GetGetOk returns a tuple with the Get field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetGetOk() ([]float32, bool) {
	if o == nil || IsNil(o.Get) {
		return nil, false
	}
	return o.Get, true
}

// HasGet returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasGet() bool {
	if o != nil && !IsNil(o.Get) {
		return true
	}

	return false
}

// SetGet gets a reference to the given []float32 and assigns it to the Get field.
func (o *NextUpstreamTcpCodes) SetGet(v []float32) {
	o.Get = v
}

// GetPost returns the Post field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetPost() []float32 {
	if o == nil || IsNil(o.Post) {
		var ret []float32
		return ret
	}
	return o.Post
}

// GetPostOk returns a tuple with the Post field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetPostOk() ([]float32, bool) {
	if o == nil || IsNil(o.Post) {
		return nil, false
	}
	return o.Post, true
}

// HasPost returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasPost() bool {
	if o != nil && !IsNil(o.Post) {
		return true
	}

	return false
}

// SetPost gets a reference to the given []float32 and assigns it to the Post field.
func (o *NextUpstreamTcpCodes) SetPost(v []float32) {
	o.Post = v
}

// GetPut returns the Put field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetPut() []float32 {
	if o == nil || IsNil(o.Put) {
		var ret []float32
		return ret
	}
	return o.Put
}

// GetPutOk returns a tuple with the Put field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetPutOk() ([]float32, bool) {
	if o == nil || IsNil(o.Put) {
		return nil, false
	}
	return o.Put, true
}

// HasPut returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasPut() bool {
	if o != nil && !IsNil(o.Put) {
		return true
	}

	return false
}

// SetPut gets a reference to the given []float32 and assigns it to the Put field.
func (o *NextUpstreamTcpCodes) SetPut(v []float32) {
	o.Put = v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetDelete() []float32 {
	if o == nil || IsNil(o.Delete) {
		var ret []float32
		return ret
	}
	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetDeleteOk() ([]float32, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given []float32 and assigns it to the Delete field.
func (o *NextUpstreamTcpCodes) SetDelete(v []float32) {
	o.Delete = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetOptions() []float32 {
	if o == nil || IsNil(o.Options) {
		var ret []float32
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetOptionsOk() ([]float32, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []float32 and assigns it to the Options field.
func (o *NextUpstreamTcpCodes) SetOptions(v []float32) {
	o.Options = v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *NextUpstreamTcpCodes) GetPatch() []float32 {
	if o == nil || IsNil(o.Patch) {
		var ret []float32
		return ret
	}
	return o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextUpstreamTcpCodes) GetPatchOk() ([]float32, bool) {
	if o == nil || IsNil(o.Patch) {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *NextUpstreamTcpCodes) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given []float32 and assigns it to the Patch field.
func (o *NextUpstreamTcpCodes) SetPatch(v []float32) {
	o.Patch = v
}

func (o NextUpstreamTcpCodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextUpstreamTcpCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Head) {
		toSerialize["head"] = o.Head
	}
	if !IsNil(o.Get) {
		toSerialize["get"] = o.Get
	}
	if !IsNil(o.Post) {
		toSerialize["post"] = o.Post
	}
	if !IsNil(o.Put) {
		toSerialize["put"] = o.Put
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Patch) {
		toSerialize["patch"] = o.Patch
	}
	return toSerialize, nil
}

type NullableNextUpstreamTcpCodes struct {
	value *NextUpstreamTcpCodes
	isSet bool
}

func (v NullableNextUpstreamTcpCodes) Get() *NextUpstreamTcpCodes {
	return v.value
}

func (v *NullableNextUpstreamTcpCodes) Set(val *NextUpstreamTcpCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableNextUpstreamTcpCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableNextUpstreamTcpCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextUpstreamTcpCodes(val *NextUpstreamTcpCodes) *NullableNextUpstreamTcpCodes {
	return &NullableNextUpstreamTcpCodes{value: val, isSet: true}
}

func (v NullableNextUpstreamTcpCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextUpstreamTcpCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



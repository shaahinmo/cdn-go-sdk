/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the PageRuleDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageRuleDiff{}

// PageRuleDiff struct for PageRuleDiff
type PageRuleDiff struct {
	// URL pattern of target pages
	Url *string `json:"url,omitempty"`
	CacheLevel *string `json:"cache_level,omitempty"`
	WafStatus *bool `json:"waf_status,omitempty"`
	// Shows whether firewall is enabled or not
	// Deprecated
	FwStatus *bool `json:"fw_status,omitempty"`
	Acceleration *Acceleration `json:"acceleration,omitempty"`
	// Secure link is enabled or not
	SlinkStatus *bool `json:"slink_status,omitempty"`
	// Is the page-rule enabled?
	Status *bool `json:"status,omitempty"`
	Cache200 *string `json:"cache_200,omitempty"`
	CacheAny *string `json:"cache_any,omitempty"`
	// Cookie variables to consider in cache (comma separaterd values)
	CacheCookie *string `json:"cache_cookie,omitempty"`
	CacheArgs *bool `json:"cache_args,omitempty"`
	// Query string arguments to consider in cache (& seperated values)
	CacheArg *string `json:"cache_arg,omitempty"`
	// Deprecated
	CacheScheme *bool `json:"cache_scheme,omitempty"`
	CacheBrowser *string `json:"cache_browser,omitempty"`
	// Ignore default behavior in caching set-cookie header
	CacheIgnoreSc *bool `json:"cache_ignore_sc,omitempty"`
	// Ignore default behavior in caching vary header
	CacheIgnoreVary *bool `json:"cache_ignore_vary,omitempty"`
	CacheIgnoreCc *bool `json:"cache_ignore_cc,omitempty"`
	CorsHeader *string `json:"cors_header,omitempty"`
	RewriteUrl *string `json:"rewrite_url,omitempty"`
	SlinkSecret *string `json:"slink_secret,omitempty"`
	SlinkMd5 []string `json:"slink_md5,omitempty"`
	ClusterStatus *bool `json:"cluster_status,omitempty"`
	ClusterId NullableString `json:"cluster_id,omitempty"`
	EdgeComputeId NullableString `json:"edge_compute_id,omitempty"`
	UpstreamTimeout *UpstreamTimeout `json:"upstream_timeout,omitempty"`
	ReqCustomHeaders []PageRuleDiffReqCustomHeadersInner `json:"req_custom_headers,omitempty"`
	CacheDeviceType *bool `json:"cache_device_type,omitempty"`
	ImageResize *PageRuleDiffImageResize `json:"image_resize,omitempty"`
	LoadBalancer *string `json:"load_balancer,omitempty"`
	ResCustomHeaders []PageRuleDiffReqCustomHeadersInner `json:"res_custom_headers,omitempty"`
	ReqHideHeaders []string `json:"req_hide_headers,omitempty"`
	ResHideHeaders []string `json:"res_hide_headers,omitempty"`
	CustomHostHeader *string `json:"custom_host_header,omitempty"`
	Redirect *PageRuleDiffRedirect `json:"redirect,omitempty"`
}

// NewPageRuleDiff instantiates a new PageRuleDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageRuleDiff() *PageRuleDiff {
	this := PageRuleDiff{}
	var cacheArg string = ""
	this.CacheArg = &cacheArg
	return &this
}

// NewPageRuleDiffWithDefaults instantiates a new PageRuleDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageRuleDiffWithDefaults() *PageRuleDiff {
	this := PageRuleDiff{}
	var cacheArg string = ""
	this.CacheArg = &cacheArg
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PageRuleDiff) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PageRuleDiff) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PageRuleDiff) SetUrl(v string) {
	o.Url = &v
}

// GetCacheLevel returns the CacheLevel field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheLevel() string {
	if o == nil || IsNil(o.CacheLevel) {
		var ret string
		return ret
	}
	return *o.CacheLevel
}

// GetCacheLevelOk returns a tuple with the CacheLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheLevelOk() (*string, bool) {
	if o == nil || IsNil(o.CacheLevel) {
		return nil, false
	}
	return o.CacheLevel, true
}

// HasCacheLevel returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheLevel() bool {
	if o != nil && !IsNil(o.CacheLevel) {
		return true
	}

	return false
}

// SetCacheLevel gets a reference to the given string and assigns it to the CacheLevel field.
func (o *PageRuleDiff) SetCacheLevel(v string) {
	o.CacheLevel = &v
}

// GetWafStatus returns the WafStatus field value if set, zero value otherwise.
func (o *PageRuleDiff) GetWafStatus() bool {
	if o == nil || IsNil(o.WafStatus) {
		var ret bool
		return ret
	}
	return *o.WafStatus
}

// GetWafStatusOk returns a tuple with the WafStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetWafStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.WafStatus) {
		return nil, false
	}
	return o.WafStatus, true
}

// HasWafStatus returns a boolean if a field has been set.
func (o *PageRuleDiff) HasWafStatus() bool {
	if o != nil && !IsNil(o.WafStatus) {
		return true
	}

	return false
}

// SetWafStatus gets a reference to the given bool and assigns it to the WafStatus field.
func (o *PageRuleDiff) SetWafStatus(v bool) {
	o.WafStatus = &v
}

// GetFwStatus returns the FwStatus field value if set, zero value otherwise.
// Deprecated
func (o *PageRuleDiff) GetFwStatus() bool {
	if o == nil || IsNil(o.FwStatus) {
		var ret bool
		return ret
	}
	return *o.FwStatus
}

// GetFwStatusOk returns a tuple with the FwStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRuleDiff) GetFwStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.FwStatus) {
		return nil, false
	}
	return o.FwStatus, true
}

// HasFwStatus returns a boolean if a field has been set.
func (o *PageRuleDiff) HasFwStatus() bool {
	if o != nil && !IsNil(o.FwStatus) {
		return true
	}

	return false
}

// SetFwStatus gets a reference to the given bool and assigns it to the FwStatus field.
// Deprecated
func (o *PageRuleDiff) SetFwStatus(v bool) {
	o.FwStatus = &v
}

// GetAcceleration returns the Acceleration field value if set, zero value otherwise.
func (o *PageRuleDiff) GetAcceleration() Acceleration {
	if o == nil || IsNil(o.Acceleration) {
		var ret Acceleration
		return ret
	}
	return *o.Acceleration
}

// GetAccelerationOk returns a tuple with the Acceleration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetAccelerationOk() (*Acceleration, bool) {
	if o == nil || IsNil(o.Acceleration) {
		return nil, false
	}
	return o.Acceleration, true
}

// HasAcceleration returns a boolean if a field has been set.
func (o *PageRuleDiff) HasAcceleration() bool {
	if o != nil && !IsNil(o.Acceleration) {
		return true
	}

	return false
}

// SetAcceleration gets a reference to the given Acceleration and assigns it to the Acceleration field.
func (o *PageRuleDiff) SetAcceleration(v Acceleration) {
	o.Acceleration = &v
}

// GetSlinkStatus returns the SlinkStatus field value if set, zero value otherwise.
func (o *PageRuleDiff) GetSlinkStatus() bool {
	if o == nil || IsNil(o.SlinkStatus) {
		var ret bool
		return ret
	}
	return *o.SlinkStatus
}

// GetSlinkStatusOk returns a tuple with the SlinkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetSlinkStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.SlinkStatus) {
		return nil, false
	}
	return o.SlinkStatus, true
}

// HasSlinkStatus returns a boolean if a field has been set.
func (o *PageRuleDiff) HasSlinkStatus() bool {
	if o != nil && !IsNil(o.SlinkStatus) {
		return true
	}

	return false
}

// SetSlinkStatus gets a reference to the given bool and assigns it to the SlinkStatus field.
func (o *PageRuleDiff) SetSlinkStatus(v bool) {
	o.SlinkStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PageRuleDiff) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PageRuleDiff) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *PageRuleDiff) SetStatus(v bool) {
	o.Status = &v
}

// GetCache200 returns the Cache200 field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCache200() string {
	if o == nil || IsNil(o.Cache200) {
		var ret string
		return ret
	}
	return *o.Cache200
}

// GetCache200Ok returns a tuple with the Cache200 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCache200Ok() (*string, bool) {
	if o == nil || IsNil(o.Cache200) {
		return nil, false
	}
	return o.Cache200, true
}

// HasCache200 returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCache200() bool {
	if o != nil && !IsNil(o.Cache200) {
		return true
	}

	return false
}

// SetCache200 gets a reference to the given string and assigns it to the Cache200 field.
func (o *PageRuleDiff) SetCache200(v string) {
	o.Cache200 = &v
}

// GetCacheAny returns the CacheAny field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheAny() string {
	if o == nil || IsNil(o.CacheAny) {
		var ret string
		return ret
	}
	return *o.CacheAny
}

// GetCacheAnyOk returns a tuple with the CacheAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheAnyOk() (*string, bool) {
	if o == nil || IsNil(o.CacheAny) {
		return nil, false
	}
	return o.CacheAny, true
}

// HasCacheAny returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheAny() bool {
	if o != nil && !IsNil(o.CacheAny) {
		return true
	}

	return false
}

// SetCacheAny gets a reference to the given string and assigns it to the CacheAny field.
func (o *PageRuleDiff) SetCacheAny(v string) {
	o.CacheAny = &v
}

// GetCacheCookie returns the CacheCookie field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheCookie() string {
	if o == nil || IsNil(o.CacheCookie) {
		var ret string
		return ret
	}
	return *o.CacheCookie
}

// GetCacheCookieOk returns a tuple with the CacheCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheCookieOk() (*string, bool) {
	if o == nil || IsNil(o.CacheCookie) {
		return nil, false
	}
	return o.CacheCookie, true
}

// HasCacheCookie returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheCookie() bool {
	if o != nil && !IsNil(o.CacheCookie) {
		return true
	}

	return false
}

// SetCacheCookie gets a reference to the given string and assigns it to the CacheCookie field.
func (o *PageRuleDiff) SetCacheCookie(v string) {
	o.CacheCookie = &v
}

// GetCacheArgs returns the CacheArgs field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheArgs() bool {
	if o == nil || IsNil(o.CacheArgs) {
		var ret bool
		return ret
	}
	return *o.CacheArgs
}

// GetCacheArgsOk returns a tuple with the CacheArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheArgsOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheArgs) {
		return nil, false
	}
	return o.CacheArgs, true
}

// HasCacheArgs returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheArgs() bool {
	if o != nil && !IsNil(o.CacheArgs) {
		return true
	}

	return false
}

// SetCacheArgs gets a reference to the given bool and assigns it to the CacheArgs field.
func (o *PageRuleDiff) SetCacheArgs(v bool) {
	o.CacheArgs = &v
}

// GetCacheArg returns the CacheArg field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheArg() string {
	if o == nil || IsNil(o.CacheArg) {
		var ret string
		return ret
	}
	return *o.CacheArg
}

// GetCacheArgOk returns a tuple with the CacheArg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheArgOk() (*string, bool) {
	if o == nil || IsNil(o.CacheArg) {
		return nil, false
	}
	return o.CacheArg, true
}

// HasCacheArg returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheArg() bool {
	if o != nil && !IsNil(o.CacheArg) {
		return true
	}

	return false
}

// SetCacheArg gets a reference to the given string and assigns it to the CacheArg field.
func (o *PageRuleDiff) SetCacheArg(v string) {
	o.CacheArg = &v
}

// GetCacheScheme returns the CacheScheme field value if set, zero value otherwise.
// Deprecated
func (o *PageRuleDiff) GetCacheScheme() bool {
	if o == nil || IsNil(o.CacheScheme) {
		var ret bool
		return ret
	}
	return *o.CacheScheme
}

// GetCacheSchemeOk returns a tuple with the CacheScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PageRuleDiff) GetCacheSchemeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheScheme) {
		return nil, false
	}
	return o.CacheScheme, true
}

// HasCacheScheme returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheScheme() bool {
	if o != nil && !IsNil(o.CacheScheme) {
		return true
	}

	return false
}

// SetCacheScheme gets a reference to the given bool and assigns it to the CacheScheme field.
// Deprecated
func (o *PageRuleDiff) SetCacheScheme(v bool) {
	o.CacheScheme = &v
}

// GetCacheBrowser returns the CacheBrowser field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheBrowser() string {
	if o == nil || IsNil(o.CacheBrowser) {
		var ret string
		return ret
	}
	return *o.CacheBrowser
}

// GetCacheBrowserOk returns a tuple with the CacheBrowser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheBrowserOk() (*string, bool) {
	if o == nil || IsNil(o.CacheBrowser) {
		return nil, false
	}
	return o.CacheBrowser, true
}

// HasCacheBrowser returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheBrowser() bool {
	if o != nil && !IsNil(o.CacheBrowser) {
		return true
	}

	return false
}

// SetCacheBrowser gets a reference to the given string and assigns it to the CacheBrowser field.
func (o *PageRuleDiff) SetCacheBrowser(v string) {
	o.CacheBrowser = &v
}

// GetCacheIgnoreSc returns the CacheIgnoreSc field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheIgnoreSc() bool {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreSc
}

// GetCacheIgnoreScOk returns a tuple with the CacheIgnoreSc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheIgnoreScOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreSc) {
		return nil, false
	}
	return o.CacheIgnoreSc, true
}

// HasCacheIgnoreSc returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheIgnoreSc() bool {
	if o != nil && !IsNil(o.CacheIgnoreSc) {
		return true
	}

	return false
}

// SetCacheIgnoreSc gets a reference to the given bool and assigns it to the CacheIgnoreSc field.
func (o *PageRuleDiff) SetCacheIgnoreSc(v bool) {
	o.CacheIgnoreSc = &v
}

// GetCacheIgnoreVary returns the CacheIgnoreVary field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheIgnoreVary() bool {
	if o == nil || IsNil(o.CacheIgnoreVary) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreVary
}

// GetCacheIgnoreVaryOk returns a tuple with the CacheIgnoreVary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheIgnoreVaryOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreVary) {
		return nil, false
	}
	return o.CacheIgnoreVary, true
}

// HasCacheIgnoreVary returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheIgnoreVary() bool {
	if o != nil && !IsNil(o.CacheIgnoreVary) {
		return true
	}

	return false
}

// SetCacheIgnoreVary gets a reference to the given bool and assigns it to the CacheIgnoreVary field.
func (o *PageRuleDiff) SetCacheIgnoreVary(v bool) {
	o.CacheIgnoreVary = &v
}

// GetCacheIgnoreCc returns the CacheIgnoreCc field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheIgnoreCc() bool {
	if o == nil || IsNil(o.CacheIgnoreCc) {
		var ret bool
		return ret
	}
	return *o.CacheIgnoreCc
}

// GetCacheIgnoreCcOk returns a tuple with the CacheIgnoreCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheIgnoreCcOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheIgnoreCc) {
		return nil, false
	}
	return o.CacheIgnoreCc, true
}

// HasCacheIgnoreCc returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheIgnoreCc() bool {
	if o != nil && !IsNil(o.CacheIgnoreCc) {
		return true
	}

	return false
}

// SetCacheIgnoreCc gets a reference to the given bool and assigns it to the CacheIgnoreCc field.
func (o *PageRuleDiff) SetCacheIgnoreCc(v bool) {
	o.CacheIgnoreCc = &v
}

// GetCorsHeader returns the CorsHeader field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCorsHeader() string {
	if o == nil || IsNil(o.CorsHeader) {
		var ret string
		return ret
	}
	return *o.CorsHeader
}

// GetCorsHeaderOk returns a tuple with the CorsHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCorsHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.CorsHeader) {
		return nil, false
	}
	return o.CorsHeader, true
}

// HasCorsHeader returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCorsHeader() bool {
	if o != nil && !IsNil(o.CorsHeader) {
		return true
	}

	return false
}

// SetCorsHeader gets a reference to the given string and assigns it to the CorsHeader field.
func (o *PageRuleDiff) SetCorsHeader(v string) {
	o.CorsHeader = &v
}

// GetRewriteUrl returns the RewriteUrl field value if set, zero value otherwise.
func (o *PageRuleDiff) GetRewriteUrl() string {
	if o == nil || IsNil(o.RewriteUrl) {
		var ret string
		return ret
	}
	return *o.RewriteUrl
}

// GetRewriteUrlOk returns a tuple with the RewriteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetRewriteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RewriteUrl) {
		return nil, false
	}
	return o.RewriteUrl, true
}

// HasRewriteUrl returns a boolean if a field has been set.
func (o *PageRuleDiff) HasRewriteUrl() bool {
	if o != nil && !IsNil(o.RewriteUrl) {
		return true
	}

	return false
}

// SetRewriteUrl gets a reference to the given string and assigns it to the RewriteUrl field.
func (o *PageRuleDiff) SetRewriteUrl(v string) {
	o.RewriteUrl = &v
}

// GetSlinkSecret returns the SlinkSecret field value if set, zero value otherwise.
func (o *PageRuleDiff) GetSlinkSecret() string {
	if o == nil || IsNil(o.SlinkSecret) {
		var ret string
		return ret
	}
	return *o.SlinkSecret
}

// GetSlinkSecretOk returns a tuple with the SlinkSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetSlinkSecretOk() (*string, bool) {
	if o == nil || IsNil(o.SlinkSecret) {
		return nil, false
	}
	return o.SlinkSecret, true
}

// HasSlinkSecret returns a boolean if a field has been set.
func (o *PageRuleDiff) HasSlinkSecret() bool {
	if o != nil && !IsNil(o.SlinkSecret) {
		return true
	}

	return false
}

// SetSlinkSecret gets a reference to the given string and assigns it to the SlinkSecret field.
func (o *PageRuleDiff) SetSlinkSecret(v string) {
	o.SlinkSecret = &v
}

// GetSlinkMd5 returns the SlinkMd5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PageRuleDiff) GetSlinkMd5() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SlinkMd5
}

// GetSlinkMd5Ok returns a tuple with the SlinkMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PageRuleDiff) GetSlinkMd5Ok() ([]string, bool) {
	if o == nil || IsNil(o.SlinkMd5) {
		return nil, false
	}
	return o.SlinkMd5, true
}

// HasSlinkMd5 returns a boolean if a field has been set.
func (o *PageRuleDiff) HasSlinkMd5() bool {
	if o != nil && !IsNil(o.SlinkMd5) {
		return true
	}

	return false
}

// SetSlinkMd5 gets a reference to the given []string and assigns it to the SlinkMd5 field.
func (o *PageRuleDiff) SetSlinkMd5(v []string) {
	o.SlinkMd5 = v
}

// GetClusterStatus returns the ClusterStatus field value if set, zero value otherwise.
func (o *PageRuleDiff) GetClusterStatus() bool {
	if o == nil || IsNil(o.ClusterStatus) {
		var ret bool
		return ret
	}
	return *o.ClusterStatus
}

// GetClusterStatusOk returns a tuple with the ClusterStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetClusterStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ClusterStatus) {
		return nil, false
	}
	return o.ClusterStatus, true
}

// HasClusterStatus returns a boolean if a field has been set.
func (o *PageRuleDiff) HasClusterStatus() bool {
	if o != nil && !IsNil(o.ClusterStatus) {
		return true
	}

	return false
}

// SetClusterStatus gets a reference to the given bool and assigns it to the ClusterStatus field.
func (o *PageRuleDiff) SetClusterStatus(v bool) {
	o.ClusterStatus = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PageRuleDiff) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret string
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PageRuleDiff) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *PageRuleDiff) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableString and assigns it to the ClusterId field.
func (o *PageRuleDiff) SetClusterId(v string) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *PageRuleDiff) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *PageRuleDiff) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetEdgeComputeId returns the EdgeComputeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PageRuleDiff) GetEdgeComputeId() string {
	if o == nil || IsNil(o.EdgeComputeId.Get()) {
		var ret string
		return ret
	}
	return *o.EdgeComputeId.Get()
}

// GetEdgeComputeIdOk returns a tuple with the EdgeComputeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PageRuleDiff) GetEdgeComputeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EdgeComputeId.Get(), o.EdgeComputeId.IsSet()
}

// HasEdgeComputeId returns a boolean if a field has been set.
func (o *PageRuleDiff) HasEdgeComputeId() bool {
	if o != nil && o.EdgeComputeId.IsSet() {
		return true
	}

	return false
}

// SetEdgeComputeId gets a reference to the given NullableString and assigns it to the EdgeComputeId field.
func (o *PageRuleDiff) SetEdgeComputeId(v string) {
	o.EdgeComputeId.Set(&v)
}
// SetEdgeComputeIdNil sets the value for EdgeComputeId to be an explicit nil
func (o *PageRuleDiff) SetEdgeComputeIdNil() {
	o.EdgeComputeId.Set(nil)
}

// UnsetEdgeComputeId ensures that no value is present for EdgeComputeId, not even an explicit nil
func (o *PageRuleDiff) UnsetEdgeComputeId() {
	o.EdgeComputeId.Unset()
}

// GetUpstreamTimeout returns the UpstreamTimeout field value if set, zero value otherwise.
func (o *PageRuleDiff) GetUpstreamTimeout() UpstreamTimeout {
	if o == nil || IsNil(o.UpstreamTimeout) {
		var ret UpstreamTimeout
		return ret
	}
	return *o.UpstreamTimeout
}

// GetUpstreamTimeoutOk returns a tuple with the UpstreamTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetUpstreamTimeoutOk() (*UpstreamTimeout, bool) {
	if o == nil || IsNil(o.UpstreamTimeout) {
		return nil, false
	}
	return o.UpstreamTimeout, true
}

// HasUpstreamTimeout returns a boolean if a field has been set.
func (o *PageRuleDiff) HasUpstreamTimeout() bool {
	if o != nil && !IsNil(o.UpstreamTimeout) {
		return true
	}

	return false
}

// SetUpstreamTimeout gets a reference to the given UpstreamTimeout and assigns it to the UpstreamTimeout field.
func (o *PageRuleDiff) SetUpstreamTimeout(v UpstreamTimeout) {
	o.UpstreamTimeout = &v
}

// GetReqCustomHeaders returns the ReqCustomHeaders field value if set, zero value otherwise.
func (o *PageRuleDiff) GetReqCustomHeaders() []PageRuleDiffReqCustomHeadersInner {
	if o == nil || IsNil(o.ReqCustomHeaders) {
		var ret []PageRuleDiffReqCustomHeadersInner
		return ret
	}
	return o.ReqCustomHeaders
}

// GetReqCustomHeadersOk returns a tuple with the ReqCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetReqCustomHeadersOk() ([]PageRuleDiffReqCustomHeadersInner, bool) {
	if o == nil || IsNil(o.ReqCustomHeaders) {
		return nil, false
	}
	return o.ReqCustomHeaders, true
}

// HasReqCustomHeaders returns a boolean if a field has been set.
func (o *PageRuleDiff) HasReqCustomHeaders() bool {
	if o != nil && !IsNil(o.ReqCustomHeaders) {
		return true
	}

	return false
}

// SetReqCustomHeaders gets a reference to the given []PageRuleDiffReqCustomHeadersInner and assigns it to the ReqCustomHeaders field.
func (o *PageRuleDiff) SetReqCustomHeaders(v []PageRuleDiffReqCustomHeadersInner) {
	o.ReqCustomHeaders = v
}

// GetCacheDeviceType returns the CacheDeviceType field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCacheDeviceType() bool {
	if o == nil || IsNil(o.CacheDeviceType) {
		var ret bool
		return ret
	}
	return *o.CacheDeviceType
}

// GetCacheDeviceTypeOk returns a tuple with the CacheDeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCacheDeviceTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheDeviceType) {
		return nil, false
	}
	return o.CacheDeviceType, true
}

// HasCacheDeviceType returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCacheDeviceType() bool {
	if o != nil && !IsNil(o.CacheDeviceType) {
		return true
	}

	return false
}

// SetCacheDeviceType gets a reference to the given bool and assigns it to the CacheDeviceType field.
func (o *PageRuleDiff) SetCacheDeviceType(v bool) {
	o.CacheDeviceType = &v
}

// GetImageResize returns the ImageResize field value if set, zero value otherwise.
func (o *PageRuleDiff) GetImageResize() PageRuleDiffImageResize {
	if o == nil || IsNil(o.ImageResize) {
		var ret PageRuleDiffImageResize
		return ret
	}
	return *o.ImageResize
}

// GetImageResizeOk returns a tuple with the ImageResize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetImageResizeOk() (*PageRuleDiffImageResize, bool) {
	if o == nil || IsNil(o.ImageResize) {
		return nil, false
	}
	return o.ImageResize, true
}

// HasImageResize returns a boolean if a field has been set.
func (o *PageRuleDiff) HasImageResize() bool {
	if o != nil && !IsNil(o.ImageResize) {
		return true
	}

	return false
}

// SetImageResize gets a reference to the given PageRuleDiffImageResize and assigns it to the ImageResize field.
func (o *PageRuleDiff) SetImageResize(v PageRuleDiffImageResize) {
	o.ImageResize = &v
}

// GetLoadBalancer returns the LoadBalancer field value if set, zero value otherwise.
func (o *PageRuleDiff) GetLoadBalancer() string {
	if o == nil || IsNil(o.LoadBalancer) {
		var ret string
		return ret
	}
	return *o.LoadBalancer
}

// GetLoadBalancerOk returns a tuple with the LoadBalancer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetLoadBalancerOk() (*string, bool) {
	if o == nil || IsNil(o.LoadBalancer) {
		return nil, false
	}
	return o.LoadBalancer, true
}

// HasLoadBalancer returns a boolean if a field has been set.
func (o *PageRuleDiff) HasLoadBalancer() bool {
	if o != nil && !IsNil(o.LoadBalancer) {
		return true
	}

	return false
}

// SetLoadBalancer gets a reference to the given string and assigns it to the LoadBalancer field.
func (o *PageRuleDiff) SetLoadBalancer(v string) {
	o.LoadBalancer = &v
}

// GetResCustomHeaders returns the ResCustomHeaders field value if set, zero value otherwise.
func (o *PageRuleDiff) GetResCustomHeaders() []PageRuleDiffReqCustomHeadersInner {
	if o == nil || IsNil(o.ResCustomHeaders) {
		var ret []PageRuleDiffReqCustomHeadersInner
		return ret
	}
	return o.ResCustomHeaders
}

// GetResCustomHeadersOk returns a tuple with the ResCustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetResCustomHeadersOk() ([]PageRuleDiffReqCustomHeadersInner, bool) {
	if o == nil || IsNil(o.ResCustomHeaders) {
		return nil, false
	}
	return o.ResCustomHeaders, true
}

// HasResCustomHeaders returns a boolean if a field has been set.
func (o *PageRuleDiff) HasResCustomHeaders() bool {
	if o != nil && !IsNil(o.ResCustomHeaders) {
		return true
	}

	return false
}

// SetResCustomHeaders gets a reference to the given []PageRuleDiffReqCustomHeadersInner and assigns it to the ResCustomHeaders field.
func (o *PageRuleDiff) SetResCustomHeaders(v []PageRuleDiffReqCustomHeadersInner) {
	o.ResCustomHeaders = v
}

// GetReqHideHeaders returns the ReqHideHeaders field value if set, zero value otherwise.
func (o *PageRuleDiff) GetReqHideHeaders() []string {
	if o == nil || IsNil(o.ReqHideHeaders) {
		var ret []string
		return ret
	}
	return o.ReqHideHeaders
}

// GetReqHideHeadersOk returns a tuple with the ReqHideHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetReqHideHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ReqHideHeaders) {
		return nil, false
	}
	return o.ReqHideHeaders, true
}

// HasReqHideHeaders returns a boolean if a field has been set.
func (o *PageRuleDiff) HasReqHideHeaders() bool {
	if o != nil && !IsNil(o.ReqHideHeaders) {
		return true
	}

	return false
}

// SetReqHideHeaders gets a reference to the given []string and assigns it to the ReqHideHeaders field.
func (o *PageRuleDiff) SetReqHideHeaders(v []string) {
	o.ReqHideHeaders = v
}

// GetResHideHeaders returns the ResHideHeaders field value if set, zero value otherwise.
func (o *PageRuleDiff) GetResHideHeaders() []string {
	if o == nil || IsNil(o.ResHideHeaders) {
		var ret []string
		return ret
	}
	return o.ResHideHeaders
}

// GetResHideHeadersOk returns a tuple with the ResHideHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetResHideHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.ResHideHeaders) {
		return nil, false
	}
	return o.ResHideHeaders, true
}

// HasResHideHeaders returns a boolean if a field has been set.
func (o *PageRuleDiff) HasResHideHeaders() bool {
	if o != nil && !IsNil(o.ResHideHeaders) {
		return true
	}

	return false
}

// SetResHideHeaders gets a reference to the given []string and assigns it to the ResHideHeaders field.
func (o *PageRuleDiff) SetResHideHeaders(v []string) {
	o.ResHideHeaders = v
}

// GetCustomHostHeader returns the CustomHostHeader field value if set, zero value otherwise.
func (o *PageRuleDiff) GetCustomHostHeader() string {
	if o == nil || IsNil(o.CustomHostHeader) {
		var ret string
		return ret
	}
	return *o.CustomHostHeader
}

// GetCustomHostHeaderOk returns a tuple with the CustomHostHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetCustomHostHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.CustomHostHeader) {
		return nil, false
	}
	return o.CustomHostHeader, true
}

// HasCustomHostHeader returns a boolean if a field has been set.
func (o *PageRuleDiff) HasCustomHostHeader() bool {
	if o != nil && !IsNil(o.CustomHostHeader) {
		return true
	}

	return false
}

// SetCustomHostHeader gets a reference to the given string and assigns it to the CustomHostHeader field.
func (o *PageRuleDiff) SetCustomHostHeader(v string) {
	o.CustomHostHeader = &v
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *PageRuleDiff) GetRedirect() PageRuleDiffRedirect {
	if o == nil || IsNil(o.Redirect) {
		var ret PageRuleDiffRedirect
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageRuleDiff) GetRedirectOk() (*PageRuleDiffRedirect, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *PageRuleDiff) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given PageRuleDiffRedirect and assigns it to the Redirect field.
func (o *PageRuleDiff) SetRedirect(v PageRuleDiffRedirect) {
	o.Redirect = &v
}

func (o PageRuleDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageRuleDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.CacheLevel) {
		toSerialize["cache_level"] = o.CacheLevel
	}
	if !IsNil(o.WafStatus) {
		toSerialize["waf_status"] = o.WafStatus
	}
	if !IsNil(o.FwStatus) {
		toSerialize["fw_status"] = o.FwStatus
	}
	if !IsNil(o.Acceleration) {
		toSerialize["acceleration"] = o.Acceleration
	}
	if !IsNil(o.SlinkStatus) {
		toSerialize["slink_status"] = o.SlinkStatus
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Cache200) {
		toSerialize["cache_200"] = o.Cache200
	}
	if !IsNil(o.CacheAny) {
		toSerialize["cache_any"] = o.CacheAny
	}
	if !IsNil(o.CacheCookie) {
		toSerialize["cache_cookie"] = o.CacheCookie
	}
	if !IsNil(o.CacheArgs) {
		toSerialize["cache_args"] = o.CacheArgs
	}
	if !IsNil(o.CacheArg) {
		toSerialize["cache_arg"] = o.CacheArg
	}
	if !IsNil(o.CacheScheme) {
		toSerialize["cache_scheme"] = o.CacheScheme
	}
	if !IsNil(o.CacheBrowser) {
		toSerialize["cache_browser"] = o.CacheBrowser
	}
	if !IsNil(o.CacheIgnoreSc) {
		toSerialize["cache_ignore_sc"] = o.CacheIgnoreSc
	}
	if !IsNil(o.CacheIgnoreVary) {
		toSerialize["cache_ignore_vary"] = o.CacheIgnoreVary
	}
	if !IsNil(o.CacheIgnoreCc) {
		toSerialize["cache_ignore_cc"] = o.CacheIgnoreCc
	}
	if !IsNil(o.CorsHeader) {
		toSerialize["cors_header"] = o.CorsHeader
	}
	if !IsNil(o.RewriteUrl) {
		toSerialize["rewrite_url"] = o.RewriteUrl
	}
	if !IsNil(o.SlinkSecret) {
		toSerialize["slink_secret"] = o.SlinkSecret
	}
	if o.SlinkMd5 != nil {
		toSerialize["slink_md5"] = o.SlinkMd5
	}
	if !IsNil(o.ClusterStatus) {
		toSerialize["cluster_status"] = o.ClusterStatus
	}
	if o.ClusterId.IsSet() {
		toSerialize["cluster_id"] = o.ClusterId.Get()
	}
	if o.EdgeComputeId.IsSet() {
		toSerialize["edge_compute_id"] = o.EdgeComputeId.Get()
	}
	if !IsNil(o.UpstreamTimeout) {
		toSerialize["upstream_timeout"] = o.UpstreamTimeout
	}
	if !IsNil(o.ReqCustomHeaders) {
		toSerialize["req_custom_headers"] = o.ReqCustomHeaders
	}
	if !IsNil(o.CacheDeviceType) {
		toSerialize["cache_device_type"] = o.CacheDeviceType
	}
	if !IsNil(o.ImageResize) {
		toSerialize["image_resize"] = o.ImageResize
	}
	if !IsNil(o.LoadBalancer) {
		toSerialize["load_balancer"] = o.LoadBalancer
	}
	if !IsNil(o.ResCustomHeaders) {
		toSerialize["res_custom_headers"] = o.ResCustomHeaders
	}
	if !IsNil(o.ReqHideHeaders) {
		toSerialize["req_hide_headers"] = o.ReqHideHeaders
	}
	if !IsNil(o.ResHideHeaders) {
		toSerialize["res_hide_headers"] = o.ResHideHeaders
	}
	if !IsNil(o.CustomHostHeader) {
		toSerialize["custom_host_header"] = o.CustomHostHeader
	}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	return toSerialize, nil
}

type NullablePageRuleDiff struct {
	value *PageRuleDiff
	isSet bool
}

func (v NullablePageRuleDiff) Get() *PageRuleDiff {
	return v.value
}

func (v *NullablePageRuleDiff) Set(val *PageRuleDiff) {
	v.value = val
	v.isSet = true
}

func (v NullablePageRuleDiff) IsSet() bool {
	return v.isSet
}

func (v *NullablePageRuleDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageRuleDiff(val *PageRuleDiff) *NullablePageRuleDiff {
	return &NullablePageRuleDiff{value: val, isSet: true}
}

func (v NullablePageRuleDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageRuleDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



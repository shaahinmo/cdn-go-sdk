/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BaseRateLimitRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseRateLimitRule{}

// BaseRateLimitRule struct for BaseRateLimitRule
type BaseRateLimitRule struct {
	Id *string `json:"id,omitempty"`
	Action *string `json:"action,omitempty"`
	IsEnabled *bool `json:"is_enabled,omitempty"`
	// - `?` matches any single character. - `*` matches any (possibly empty) sequence of characters. - `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component, so both `**a` and `b**` are invalid and will result in an error. A sequence of more than two consecutive `*` characters is also invalid. - `[...]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode, so e.g. `[0-9]` specifies any character between 0 and 9 inclusive. An unclosed bracket is invalid. - `[!...]` is the negation of `[...]`, i.e. it matches any characters not in the brackets. - The metacharacters `?`, `*`, `[`, `] `can be matched by using brackets (e.g. `[?]`). When a `]` occurs immediately following `[` or `[!` then it is interpreted as being part of, rather then ending, the character set, so `]` and NOT `]` can be matched by `[]]` and `[!]]` respectively. The - character can be specified inside a character sequence pattern by placing it at the start or the end, e.g. `[abc-]`. 
	UrlPattern string `json:"url_pattern"`
	Description NullableString `json:"description,omitempty"`
	ExcludeSources []string `json:"exclude_sources,omitempty"`
	Rate int32 `json:"rate"`
	Burst *int32 `json:"burst,omitempty"`
	BlockDuration *int32 `json:"block_duration,omitempty"`
	TimeDuration int32 `json:"time_duration"`
	AllowedMethods []string `json:"allowed_methods,omitempty"`
}

type _BaseRateLimitRule BaseRateLimitRule

// NewBaseRateLimitRule instantiates a new BaseRateLimitRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseRateLimitRule(urlPattern string, rate int32, timeDuration int32) *BaseRateLimitRule {
	this := BaseRateLimitRule{}
	var action string = "block"
	this.Action = &action
	this.UrlPattern = urlPattern
	this.Rate = rate
	this.TimeDuration = timeDuration
	return &this
}

// NewBaseRateLimitRuleWithDefaults instantiates a new BaseRateLimitRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRateLimitRuleWithDefaults() *BaseRateLimitRule {
	this := BaseRateLimitRule{}
	var action string = "block"
	this.Action = &action
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseRateLimitRule) SetId(v string) {
	o.Id = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *BaseRateLimitRule) SetAction(v string) {
	o.Action = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *BaseRateLimitRule) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetUrlPattern returns the UrlPattern field value
func (o *BaseRateLimitRule) GetUrlPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UrlPattern
}

// GetUrlPatternOk returns a tuple with the UrlPattern field value
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetUrlPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UrlPattern, true
}

// SetUrlPattern sets field value
func (o *BaseRateLimitRule) SetUrlPattern(v string) {
	o.UrlPattern = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseRateLimitRule) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseRateLimitRule) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BaseRateLimitRule) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BaseRateLimitRule) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BaseRateLimitRule) UnsetDescription() {
	o.Description.Unset()
}

// GetExcludeSources returns the ExcludeSources field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetExcludeSources() []string {
	if o == nil || IsNil(o.ExcludeSources) {
		var ret []string
		return ret
	}
	return o.ExcludeSources
}

// GetExcludeSourcesOk returns a tuple with the ExcludeSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetExcludeSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeSources) {
		return nil, false
	}
	return o.ExcludeSources, true
}

// HasExcludeSources returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasExcludeSources() bool {
	if o != nil && !IsNil(o.ExcludeSources) {
		return true
	}

	return false
}

// SetExcludeSources gets a reference to the given []string and assigns it to the ExcludeSources field.
func (o *BaseRateLimitRule) SetExcludeSources(v []string) {
	o.ExcludeSources = v
}

// GetRate returns the Rate field value
func (o *BaseRateLimitRule) GetRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *BaseRateLimitRule) SetRate(v int32) {
	o.Rate = v
}

// GetBurst returns the Burst field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetBurst() int32 {
	if o == nil || IsNil(o.Burst) {
		var ret int32
		return ret
	}
	return *o.Burst
}

// GetBurstOk returns a tuple with the Burst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.Burst) {
		return nil, false
	}
	return o.Burst, true
}

// HasBurst returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasBurst() bool {
	if o != nil && !IsNil(o.Burst) {
		return true
	}

	return false
}

// SetBurst gets a reference to the given int32 and assigns it to the Burst field.
func (o *BaseRateLimitRule) SetBurst(v int32) {
	o.Burst = &v
}

// GetBlockDuration returns the BlockDuration field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetBlockDuration() int32 {
	if o == nil || IsNil(o.BlockDuration) {
		var ret int32
		return ret
	}
	return *o.BlockDuration
}

// GetBlockDurationOk returns a tuple with the BlockDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetBlockDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockDuration) {
		return nil, false
	}
	return o.BlockDuration, true
}

// HasBlockDuration returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasBlockDuration() bool {
	if o != nil && !IsNil(o.BlockDuration) {
		return true
	}

	return false
}

// SetBlockDuration gets a reference to the given int32 and assigns it to the BlockDuration field.
func (o *BaseRateLimitRule) SetBlockDuration(v int32) {
	o.BlockDuration = &v
}

// GetTimeDuration returns the TimeDuration field value
func (o *BaseRateLimitRule) GetTimeDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeDuration
}

// GetTimeDurationOk returns a tuple with the TimeDuration field value
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetTimeDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeDuration, true
}

// SetTimeDuration sets field value
func (o *BaseRateLimitRule) SetTimeDuration(v int32) {
	o.TimeDuration = v
}

// GetAllowedMethods returns the AllowedMethods field value if set, zero value otherwise.
func (o *BaseRateLimitRule) GetAllowedMethods() []string {
	if o == nil || IsNil(o.AllowedMethods) {
		var ret []string
		return ret
	}
	return o.AllowedMethods
}

// GetAllowedMethodsOk returns a tuple with the AllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRateLimitRule) GetAllowedMethodsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedMethods) {
		return nil, false
	}
	return o.AllowedMethods, true
}

// HasAllowedMethods returns a boolean if a field has been set.
func (o *BaseRateLimitRule) HasAllowedMethods() bool {
	if o != nil && !IsNil(o.AllowedMethods) {
		return true
	}

	return false
}

// SetAllowedMethods gets a reference to the given []string and assigns it to the AllowedMethods field.
func (o *BaseRateLimitRule) SetAllowedMethods(v []string) {
	o.AllowedMethods = v
}

func (o BaseRateLimitRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseRateLimitRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	toSerialize["url_pattern"] = o.UrlPattern
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.ExcludeSources) {
		toSerialize["exclude_sources"] = o.ExcludeSources
	}
	toSerialize["rate"] = o.Rate
	if !IsNil(o.Burst) {
		toSerialize["burst"] = o.Burst
	}
	if !IsNil(o.BlockDuration) {
		toSerialize["block_duration"] = o.BlockDuration
	}
	toSerialize["time_duration"] = o.TimeDuration
	if !IsNil(o.AllowedMethods) {
		toSerialize["allowed_methods"] = o.AllowedMethods
	}
	return toSerialize, nil
}

func (o *BaseRateLimitRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url_pattern",
		"rate",
		"time_duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseRateLimitRule := _BaseRateLimitRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseRateLimitRule)

	if err != nil {
		return err
	}

	*o = BaseRateLimitRule(varBaseRateLimitRule)

	return err
}

type NullableBaseRateLimitRule struct {
	value *BaseRateLimitRule
	isSet bool
}

func (v NullableBaseRateLimitRule) Get() *BaseRateLimitRule {
	return v.value
}

func (v *NullableBaseRateLimitRule) Set(val *BaseRateLimitRule) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseRateLimitRule) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseRateLimitRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseRateLimitRule(val *BaseRateLimitRule) *NullableBaseRateLimitRule {
	return &NullableBaseRateLimitRule{value: val, isSet: true}
}

func (v NullableBaseRateLimitRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseRateLimitRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



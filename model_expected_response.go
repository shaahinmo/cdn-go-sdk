/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the ExpectedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpectedResponse{}

// ExpectedResponse struct for ExpectedResponse
type ExpectedResponse struct {
	// List of expected http status code
	Codes []int32 `json:"codes,omitempty"`
	Headers *map[string][]string `json:"headers,omitempty"`
	ExpectedHeaders []ExpectedHeadersInner `json:"expected_headers,omitempty"`
	Body *string `json:"body,omitempty"`
}

// NewExpectedResponse instantiates a new ExpectedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpectedResponse() *ExpectedResponse {
	this := ExpectedResponse{}
	return &this
}

// NewExpectedResponseWithDefaults instantiates a new ExpectedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpectedResponseWithDefaults() *ExpectedResponse {
	this := ExpectedResponse{}
	return &this
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *ExpectedResponse) GetCodes() []int32 {
	if o == nil || IsNil(o.Codes) {
		var ret []int32
		return ret
	}
	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpectedResponse) GetCodesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *ExpectedResponse) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given []int32 and assigns it to the Codes field.
func (o *ExpectedResponse) SetCodes(v []int32) {
	o.Codes = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ExpectedResponse) GetHeaders() map[string][]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string][]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpectedResponse) GetHeadersOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ExpectedResponse) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string][]string and assigns it to the Headers field.
func (o *ExpectedResponse) SetHeaders(v map[string][]string) {
	o.Headers = &v
}

// GetExpectedHeaders returns the ExpectedHeaders field value if set, zero value otherwise.
func (o *ExpectedResponse) GetExpectedHeaders() []ExpectedHeadersInner {
	if o == nil || IsNil(o.ExpectedHeaders) {
		var ret []ExpectedHeadersInner
		return ret
	}
	return o.ExpectedHeaders
}

// GetExpectedHeadersOk returns a tuple with the ExpectedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpectedResponse) GetExpectedHeadersOk() ([]ExpectedHeadersInner, bool) {
	if o == nil || IsNil(o.ExpectedHeaders) {
		return nil, false
	}
	return o.ExpectedHeaders, true
}

// HasExpectedHeaders returns a boolean if a field has been set.
func (o *ExpectedResponse) HasExpectedHeaders() bool {
	if o != nil && !IsNil(o.ExpectedHeaders) {
		return true
	}

	return false
}

// SetExpectedHeaders gets a reference to the given []ExpectedHeadersInner and assigns it to the ExpectedHeaders field.
func (o *ExpectedResponse) SetExpectedHeaders(v []ExpectedHeadersInner) {
	o.ExpectedHeaders = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *ExpectedResponse) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpectedResponse) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *ExpectedResponse) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *ExpectedResponse) SetBody(v string) {
	o.Body = &v
}

func (o ExpectedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpectedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.ExpectedHeaders) {
		toSerialize["expected_headers"] = o.ExpectedHeaders
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

type NullableExpectedResponse struct {
	value *ExpectedResponse
	isSet bool
}

func (v NullableExpectedResponse) Get() *ExpectedResponse {
	return v.value
}

func (v *NullableExpectedResponse) Set(val *ExpectedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExpectedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExpectedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpectedResponse(val *ExpectedResponse) *NullableExpectedResponse {
	return &NullableExpectedResponse{value: val, isSet: true}
}

func (v NullableExpectedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpectedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"fmt"
)


// PrioritizePool struct for PrioritizePool
type PrioritizePool struct {
	PrioritizePoolAfter *PrioritizePoolAfter
	PrioritizePoolBefore *PrioritizePoolBefore
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PrioritizePool) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PrioritizePoolAfter
	err = json.Unmarshal(data, &dst.PrioritizePoolAfter);
	if err == nil {
		jsonPrioritizePoolAfter, _ := json.Marshal(dst.PrioritizePoolAfter)
		if string(jsonPrioritizePoolAfter) == "{}" { // empty struct
			dst.PrioritizePoolAfter = nil
		} else {
			return nil // data stored in dst.PrioritizePoolAfter, return on the first match
		}
	} else {
		dst.PrioritizePoolAfter = nil
	}

	// try to unmarshal JSON data into PrioritizePoolBefore
	err = json.Unmarshal(data, &dst.PrioritizePoolBefore);
	if err == nil {
		jsonPrioritizePoolBefore, _ := json.Marshal(dst.PrioritizePoolBefore)
		if string(jsonPrioritizePoolBefore) == "{}" { // empty struct
			dst.PrioritizePoolBefore = nil
		} else {
			return nil // data stored in dst.PrioritizePoolBefore, return on the first match
		}
	} else {
		dst.PrioritizePoolBefore = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PrioritizePool)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PrioritizePool) MarshalJSON() ([]byte, error) {
	if src.PrioritizePoolAfter != nil {
		return json.Marshal(&src.PrioritizePoolAfter)
	}

	if src.PrioritizePoolBefore != nil {
		return json.Marshal(&src.PrioritizePoolBefore)
	}

	return nil, nil // no data in anyOf schemas
}


type NullablePrioritizePool struct {
	value *PrioritizePool
	isSet bool
}

func (v NullablePrioritizePool) Get() *PrioritizePool {
	return v.value
}

func (v *NullablePrioritizePool) Set(val *PrioritizePool) {
	v.value = val
	v.isSet = true
}

func (v NullablePrioritizePool) IsSet() bool {
	return v.isSet
}

func (v *NullablePrioritizePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrioritizePool(val *PrioritizePool) *NullablePrioritizePool {
	return &NullablePrioritizePool{value: val, isSet: true}
}

func (v NullablePrioritizePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrioritizePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



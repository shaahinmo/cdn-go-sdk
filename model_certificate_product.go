/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the CertificateProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProduct{}

// CertificateProduct struct for CertificateProduct
type CertificateProduct struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	IsMulti *bool `json:"is_multi,omitempty"`
	HasWildcard *bool `json:"has_wildcard,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Price *float32 `json:"price,omitempty"`
}

// NewCertificateProduct instantiates a new CertificateProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProduct() *CertificateProduct {
	this := CertificateProduct{}
	return &this
}

// NewCertificateProductWithDefaults instantiates a new CertificateProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateProductWithDefaults() *CertificateProduct {
	this := CertificateProduct{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificateProduct) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificateProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificateProduct) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificateProduct) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificateProduct) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificateProduct) SetName(v string) {
	o.Name = &v
}

// GetIsMulti returns the IsMulti field value if set, zero value otherwise.
func (o *CertificateProduct) GetIsMulti() bool {
	if o == nil || IsNil(o.IsMulti) {
		var ret bool
		return ret
	}
	return *o.IsMulti
}

// GetIsMultiOk returns a tuple with the IsMulti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetIsMultiOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMulti) {
		return nil, false
	}
	return o.IsMulti, true
}

// HasIsMulti returns a boolean if a field has been set.
func (o *CertificateProduct) HasIsMulti() bool {
	if o != nil && !IsNil(o.IsMulti) {
		return true
	}

	return false
}

// SetIsMulti gets a reference to the given bool and assigns it to the IsMulti field.
func (o *CertificateProduct) SetIsMulti(v bool) {
	o.IsMulti = &v
}

// GetHasWildcard returns the HasWildcard field value if set, zero value otherwise.
func (o *CertificateProduct) GetHasWildcard() bool {
	if o == nil || IsNil(o.HasWildcard) {
		var ret bool
		return ret
	}
	return *o.HasWildcard
}

// GetHasWildcardOk returns a tuple with the HasWildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetHasWildcardOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWildcard) {
		return nil, false
	}
	return o.HasWildcard, true
}

// HasHasWildcard returns a boolean if a field has been set.
func (o *CertificateProduct) HasHasWildcard() bool {
	if o != nil && !IsNil(o.HasWildcard) {
		return true
	}

	return false
}

// SetHasWildcard gets a reference to the given bool and assigns it to the HasWildcard field.
func (o *CertificateProduct) SetHasWildcard(v bool) {
	o.HasWildcard = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CertificateProduct) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CertificateProduct) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CertificateProduct) SetLimit(v int32) {
	o.Limit = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CertificateProduct) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProduct) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CertificateProduct) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *CertificateProduct) SetPrice(v float32) {
	o.Price = &v
}

func (o CertificateProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsMulti) {
		toSerialize["is_multi"] = o.IsMulti
	}
	if !IsNil(o.HasWildcard) {
		toSerialize["has_wildcard"] = o.HasWildcard
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableCertificateProduct struct {
	value *CertificateProduct
	isSet bool
}

func (v NullableCertificateProduct) Get() *CertificateProduct {
	return v.value
}

func (v *NullableCertificateProduct) Set(val *CertificateProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProduct(val *CertificateProduct) *NullableCertificateProduct {
	return &NullableCertificateProduct{value: val, isSet: true}
}

func (v NullableCertificateProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

Testing SSLTLSAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cdn-api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_cdn-api_SSLTLSAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SSLTLSAPIService AccountCertificateInstall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateOrder string

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateInstall(context.Background(), certificateOrder).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateIssue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateIssue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateOrderIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateOrderIndex(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateProductIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateProductIndex(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateReissue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateOrder string

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateReissue(context.Background(), certificateOrder).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateRevoke", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateOrder string

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateRevoke(context.Background(), certificateOrder).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService AccountCertificateShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var certificateOrder string

		resp, httpRes, err := apiClient.SSLTLSAPI.AccountCertificateShow(context.Background(), certificateOrder).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var certificateId string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertDestroy(context.Background(), domain, certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var certificateId string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertGet(context.Background(), domain, certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertIssue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertIssue(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertOrderIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertOrderIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertOrderRetry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertOrderRetry(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertRevoke", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var certificateId string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertRevoke(context.Background(), domain, certificateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslCertStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslCertStore(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SSLTLSAPIService SslUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.SSLTLSAPI.SslUpdate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

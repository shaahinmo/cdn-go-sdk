/*
ArvanCloud CDN Services

Testing LoadBalancingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cdnapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/shaahinmo/cdn-go-sdk"
)

func Test_cdnapi_LoadBalancingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancingAPIService LoadBalancersDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersDestroy(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsDestroy(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsIndex(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsOriginsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsOriginsDestroy(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsOriginsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsOriginsIndex(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsOriginsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsOriginsShow(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsOriginsStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsOriginsStore(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsOriginsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsOriginsUpdate(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsShow(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsStore(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsUpdate(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPoolsUpdatePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPoolsUpdatePool(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersPrioritizePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersPrioritizePool(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersRegions(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersRegionsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersRegionsIndex(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersSettingsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersSettingsShow(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersSettingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersSettingsUpdate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersShow(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersStore(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingAPIService LoadBalancersUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingAPI.LoadBalancersUpdate(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

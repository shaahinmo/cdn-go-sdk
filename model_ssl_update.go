/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the SslUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslUpdate{}

// SslUpdate struct for SslUpdate
type SslUpdate struct {
	// a user uploaded certificate's uuid or `managed`
	Certificate *string `json:"certificate,omitempty"`
	CertificateKeyType *string `json:"certificate_key_type,omitempty"`
	// Whether Domain is using fingerprint or not
	FingerprintStatus *bool `json:"fingerprint_status,omitempty"`
	// Whether Domain is using ssl module or not
	SslStatus *bool `json:"ssl_status,omitempty"`
	// Indicates certificate is managed by arvan, or its up to the user
	CertificateMode *string `json:"certificate_mode,omitempty"`
	// Minimum version of TLS. Empty ('') means default.
	TlsVersion *string `json:"tls_version,omitempty"`
	// Whether HSTS is enabled
	HstsStatus *bool `json:"hsts_status,omitempty"`
	// Whether QUIC is enabled
	QuicStatus *bool `json:"quic_status,omitempty"`
	// HSTS max age directive
	HstsMaxAge *string `json:"hsts_max_age,omitempty"`
	HstsSubdomain *bool `json:"hsts_subdomain,omitempty"`
	HstsPreload *bool `json:"hsts_preload,omitempty"`
	HttpsRedirect *bool `json:"https_redirect,omitempty"`
	// Replace HTTP with HTTPs in HTML and JS sources
	ReplaceHttp *bool `json:"replace_http,omitempty"`
	Certificates []Certificate `json:"certificates,omitempty"`
	// returns all \"certificate orders\" since the last invalid or canceled order
	Orders []CertificateOrder `json:"orders,omitempty"`
}

// NewSslUpdate instantiates a new SslUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslUpdate() *SslUpdate {
	this := SslUpdate{}
	return &this
}

// NewSslUpdateWithDefaults instantiates a new SslUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslUpdateWithDefaults() *SslUpdate {
	this := SslUpdate{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SslUpdate) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SslUpdate) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SslUpdate) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCertificateKeyType returns the CertificateKeyType field value if set, zero value otherwise.
func (o *SslUpdate) GetCertificateKeyType() string {
	if o == nil || IsNil(o.CertificateKeyType) {
		var ret string
		return ret
	}
	return *o.CertificateKeyType
}

// GetCertificateKeyTypeOk returns a tuple with the CertificateKeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetCertificateKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateKeyType) {
		return nil, false
	}
	return o.CertificateKeyType, true
}

// HasCertificateKeyType returns a boolean if a field has been set.
func (o *SslUpdate) HasCertificateKeyType() bool {
	if o != nil && !IsNil(o.CertificateKeyType) {
		return true
	}

	return false
}

// SetCertificateKeyType gets a reference to the given string and assigns it to the CertificateKeyType field.
func (o *SslUpdate) SetCertificateKeyType(v string) {
	o.CertificateKeyType = &v
}

// GetFingerprintStatus returns the FingerprintStatus field value if set, zero value otherwise.
func (o *SslUpdate) GetFingerprintStatus() bool {
	if o == nil || IsNil(o.FingerprintStatus) {
		var ret bool
		return ret
	}
	return *o.FingerprintStatus
}

// GetFingerprintStatusOk returns a tuple with the FingerprintStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetFingerprintStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.FingerprintStatus) {
		return nil, false
	}
	return o.FingerprintStatus, true
}

// HasFingerprintStatus returns a boolean if a field has been set.
func (o *SslUpdate) HasFingerprintStatus() bool {
	if o != nil && !IsNil(o.FingerprintStatus) {
		return true
	}

	return false
}

// SetFingerprintStatus gets a reference to the given bool and assigns it to the FingerprintStatus field.
func (o *SslUpdate) SetFingerprintStatus(v bool) {
	o.FingerprintStatus = &v
}

// GetSslStatus returns the SslStatus field value if set, zero value otherwise.
func (o *SslUpdate) GetSslStatus() bool {
	if o == nil || IsNil(o.SslStatus) {
		var ret bool
		return ret
	}
	return *o.SslStatus
}

// GetSslStatusOk returns a tuple with the SslStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetSslStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.SslStatus) {
		return nil, false
	}
	return o.SslStatus, true
}

// HasSslStatus returns a boolean if a field has been set.
func (o *SslUpdate) HasSslStatus() bool {
	if o != nil && !IsNil(o.SslStatus) {
		return true
	}

	return false
}

// SetSslStatus gets a reference to the given bool and assigns it to the SslStatus field.
func (o *SslUpdate) SetSslStatus(v bool) {
	o.SslStatus = &v
}

// GetCertificateMode returns the CertificateMode field value if set, zero value otherwise.
func (o *SslUpdate) GetCertificateMode() string {
	if o == nil || IsNil(o.CertificateMode) {
		var ret string
		return ret
	}
	return *o.CertificateMode
}

// GetCertificateModeOk returns a tuple with the CertificateMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetCertificateModeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateMode) {
		return nil, false
	}
	return o.CertificateMode, true
}

// HasCertificateMode returns a boolean if a field has been set.
func (o *SslUpdate) HasCertificateMode() bool {
	if o != nil && !IsNil(o.CertificateMode) {
		return true
	}

	return false
}

// SetCertificateMode gets a reference to the given string and assigns it to the CertificateMode field.
func (o *SslUpdate) SetCertificateMode(v string) {
	o.CertificateMode = &v
}

// GetTlsVersion returns the TlsVersion field value if set, zero value otherwise.
func (o *SslUpdate) GetTlsVersion() string {
	if o == nil || IsNil(o.TlsVersion) {
		var ret string
		return ret
	}
	return *o.TlsVersion
}

// GetTlsVersionOk returns a tuple with the TlsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetTlsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TlsVersion) {
		return nil, false
	}
	return o.TlsVersion, true
}

// HasTlsVersion returns a boolean if a field has been set.
func (o *SslUpdate) HasTlsVersion() bool {
	if o != nil && !IsNil(o.TlsVersion) {
		return true
	}

	return false
}

// SetTlsVersion gets a reference to the given string and assigns it to the TlsVersion field.
func (o *SslUpdate) SetTlsVersion(v string) {
	o.TlsVersion = &v
}

// GetHstsStatus returns the HstsStatus field value if set, zero value otherwise.
func (o *SslUpdate) GetHstsStatus() bool {
	if o == nil || IsNil(o.HstsStatus) {
		var ret bool
		return ret
	}
	return *o.HstsStatus
}

// GetHstsStatusOk returns a tuple with the HstsStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetHstsStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsStatus) {
		return nil, false
	}
	return o.HstsStatus, true
}

// HasHstsStatus returns a boolean if a field has been set.
func (o *SslUpdate) HasHstsStatus() bool {
	if o != nil && !IsNil(o.HstsStatus) {
		return true
	}

	return false
}

// SetHstsStatus gets a reference to the given bool and assigns it to the HstsStatus field.
func (o *SslUpdate) SetHstsStatus(v bool) {
	o.HstsStatus = &v
}

// GetQuicStatus returns the QuicStatus field value if set, zero value otherwise.
func (o *SslUpdate) GetQuicStatus() bool {
	if o == nil || IsNil(o.QuicStatus) {
		var ret bool
		return ret
	}
	return *o.QuicStatus
}

// GetQuicStatusOk returns a tuple with the QuicStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetQuicStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.QuicStatus) {
		return nil, false
	}
	return o.QuicStatus, true
}

// HasQuicStatus returns a boolean if a field has been set.
func (o *SslUpdate) HasQuicStatus() bool {
	if o != nil && !IsNil(o.QuicStatus) {
		return true
	}

	return false
}

// SetQuicStatus gets a reference to the given bool and assigns it to the QuicStatus field.
func (o *SslUpdate) SetQuicStatus(v bool) {
	o.QuicStatus = &v
}

// GetHstsMaxAge returns the HstsMaxAge field value if set, zero value otherwise.
func (o *SslUpdate) GetHstsMaxAge() string {
	if o == nil || IsNil(o.HstsMaxAge) {
		var ret string
		return ret
	}
	return *o.HstsMaxAge
}

// GetHstsMaxAgeOk returns a tuple with the HstsMaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetHstsMaxAgeOk() (*string, bool) {
	if o == nil || IsNil(o.HstsMaxAge) {
		return nil, false
	}
	return o.HstsMaxAge, true
}

// HasHstsMaxAge returns a boolean if a field has been set.
func (o *SslUpdate) HasHstsMaxAge() bool {
	if o != nil && !IsNil(o.HstsMaxAge) {
		return true
	}

	return false
}

// SetHstsMaxAge gets a reference to the given string and assigns it to the HstsMaxAge field.
func (o *SslUpdate) SetHstsMaxAge(v string) {
	o.HstsMaxAge = &v
}

// GetHstsSubdomain returns the HstsSubdomain field value if set, zero value otherwise.
func (o *SslUpdate) GetHstsSubdomain() bool {
	if o == nil || IsNil(o.HstsSubdomain) {
		var ret bool
		return ret
	}
	return *o.HstsSubdomain
}

// GetHstsSubdomainOk returns a tuple with the HstsSubdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetHstsSubdomainOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsSubdomain) {
		return nil, false
	}
	return o.HstsSubdomain, true
}

// HasHstsSubdomain returns a boolean if a field has been set.
func (o *SslUpdate) HasHstsSubdomain() bool {
	if o != nil && !IsNil(o.HstsSubdomain) {
		return true
	}

	return false
}

// SetHstsSubdomain gets a reference to the given bool and assigns it to the HstsSubdomain field.
func (o *SslUpdate) SetHstsSubdomain(v bool) {
	o.HstsSubdomain = &v
}

// GetHstsPreload returns the HstsPreload field value if set, zero value otherwise.
func (o *SslUpdate) GetHstsPreload() bool {
	if o == nil || IsNil(o.HstsPreload) {
		var ret bool
		return ret
	}
	return *o.HstsPreload
}

// GetHstsPreloadOk returns a tuple with the HstsPreload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetHstsPreloadOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsPreload) {
		return nil, false
	}
	return o.HstsPreload, true
}

// HasHstsPreload returns a boolean if a field has been set.
func (o *SslUpdate) HasHstsPreload() bool {
	if o != nil && !IsNil(o.HstsPreload) {
		return true
	}

	return false
}

// SetHstsPreload gets a reference to the given bool and assigns it to the HstsPreload field.
func (o *SslUpdate) SetHstsPreload(v bool) {
	o.HstsPreload = &v
}

// GetHttpsRedirect returns the HttpsRedirect field value if set, zero value otherwise.
func (o *SslUpdate) GetHttpsRedirect() bool {
	if o == nil || IsNil(o.HttpsRedirect) {
		var ret bool
		return ret
	}
	return *o.HttpsRedirect
}

// GetHttpsRedirectOk returns a tuple with the HttpsRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetHttpsRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.HttpsRedirect) {
		return nil, false
	}
	return o.HttpsRedirect, true
}

// HasHttpsRedirect returns a boolean if a field has been set.
func (o *SslUpdate) HasHttpsRedirect() bool {
	if o != nil && !IsNil(o.HttpsRedirect) {
		return true
	}

	return false
}

// SetHttpsRedirect gets a reference to the given bool and assigns it to the HttpsRedirect field.
func (o *SslUpdate) SetHttpsRedirect(v bool) {
	o.HttpsRedirect = &v
}

// GetReplaceHttp returns the ReplaceHttp field value if set, zero value otherwise.
func (o *SslUpdate) GetReplaceHttp() bool {
	if o == nil || IsNil(o.ReplaceHttp) {
		var ret bool
		return ret
	}
	return *o.ReplaceHttp
}

// GetReplaceHttpOk returns a tuple with the ReplaceHttp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetReplaceHttpOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplaceHttp) {
		return nil, false
	}
	return o.ReplaceHttp, true
}

// HasReplaceHttp returns a boolean if a field has been set.
func (o *SslUpdate) HasReplaceHttp() bool {
	if o != nil && !IsNil(o.ReplaceHttp) {
		return true
	}

	return false
}

// SetReplaceHttp gets a reference to the given bool and assigns it to the ReplaceHttp field.
func (o *SslUpdate) SetReplaceHttp(v bool) {
	o.ReplaceHttp = &v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *SslUpdate) GetCertificates() []Certificate {
	if o == nil || IsNil(o.Certificates) {
		var ret []Certificate
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslUpdate) GetCertificatesOk() ([]Certificate, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *SslUpdate) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []Certificate and assigns it to the Certificates field.
func (o *SslUpdate) SetCertificates(v []Certificate) {
	o.Certificates = v
}

// GetOrders returns the Orders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslUpdate) GetOrders() []CertificateOrder {
	if o == nil {
		var ret []CertificateOrder
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslUpdate) GetOrdersOk() ([]CertificateOrder, bool) {
	if o == nil || IsNil(o.Orders) {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *SslUpdate) HasOrders() bool {
	if o != nil && !IsNil(o.Orders) {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []CertificateOrder and assigns it to the Orders field.
func (o *SslUpdate) SetOrders(v []CertificateOrder) {
	o.Orders = v
}

func (o SslUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.CertificateKeyType) {
		toSerialize["certificate_key_type"] = o.CertificateKeyType
	}
	if !IsNil(o.FingerprintStatus) {
		toSerialize["fingerprint_status"] = o.FingerprintStatus
	}
	if !IsNil(o.SslStatus) {
		toSerialize["ssl_status"] = o.SslStatus
	}
	if !IsNil(o.CertificateMode) {
		toSerialize["certificate_mode"] = o.CertificateMode
	}
	if !IsNil(o.TlsVersion) {
		toSerialize["tls_version"] = o.TlsVersion
	}
	if !IsNil(o.HstsStatus) {
		toSerialize["hsts_status"] = o.HstsStatus
	}
	if !IsNil(o.QuicStatus) {
		toSerialize["quic_status"] = o.QuicStatus
	}
	if !IsNil(o.HstsMaxAge) {
		toSerialize["hsts_max_age"] = o.HstsMaxAge
	}
	if !IsNil(o.HstsSubdomain) {
		toSerialize["hsts_subdomain"] = o.HstsSubdomain
	}
	if !IsNil(o.HstsPreload) {
		toSerialize["hsts_preload"] = o.HstsPreload
	}
	if !IsNil(o.HttpsRedirect) {
		toSerialize["https_redirect"] = o.HttpsRedirect
	}
	if !IsNil(o.ReplaceHttp) {
		toSerialize["replace_http"] = o.ReplaceHttp
	}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	if o.Orders != nil {
		toSerialize["orders"] = o.Orders
	}
	return toSerialize, nil
}

type NullableSslUpdate struct {
	value *SslUpdate
	isSet bool
}

func (v NullableSslUpdate) Get() *SslUpdate {
	return v.value
}

func (v *NullableSslUpdate) Set(val *SslUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSslUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSslUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslUpdate(val *SslUpdate) *NullableSslUpdate {
	return &NullableSslUpdate{value: val, isSet: true}
}

func (v NullableSslUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



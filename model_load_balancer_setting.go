/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the LoadBalancerSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerSetting{}

// LoadBalancerSetting struct for LoadBalancerSetting
type LoadBalancerSetting struct {
	Method *string `json:"method,omitempty"`
	// Try another server when the first one failed if on
	NextUpstreamTcp *string `json:"next_upstream_tcp,omitempty"`
	NextUpstreamTcpCodes *NextUpstreamTcpCodes `json:"next_upstream_tcp_codes,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Keepalive *string `json:"keepalive,omitempty"`
	// Zero will disable failing strategy.
	MaxFails *float32 `json:"max_fails,omitempty"`
	// Human friendly time duration.
	FailTimeout *string `json:"fail_timeout,omitempty"`
}

// NewLoadBalancerSetting instantiates a new LoadBalancerSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerSetting() *LoadBalancerSetting {
	this := LoadBalancerSetting{}
	var nextUpstreamTcp string = "off"
	this.NextUpstreamTcp = &nextUpstreamTcp
	var keepalive string = "off"
	this.Keepalive = &keepalive
	var maxFails float32 = 0
	this.MaxFails = &maxFails
	var failTimeout string = "10s"
	this.FailTimeout = &failTimeout
	return &this
}

// NewLoadBalancerSettingWithDefaults instantiates a new LoadBalancerSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerSettingWithDefaults() *LoadBalancerSetting {
	this := LoadBalancerSetting{}
	var nextUpstreamTcp string = "off"
	this.NextUpstreamTcp = &nextUpstreamTcp
	var keepalive string = "off"
	this.Keepalive = &keepalive
	var maxFails float32 = 0
	this.MaxFails = &maxFails
	var failTimeout string = "10s"
	this.FailTimeout = &failTimeout
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *LoadBalancerSetting) SetMethod(v string) {
	o.Method = &v
}

// GetNextUpstreamTcp returns the NextUpstreamTcp field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetNextUpstreamTcp() string {
	if o == nil || IsNil(o.NextUpstreamTcp) {
		var ret string
		return ret
	}
	return *o.NextUpstreamTcp
}

// GetNextUpstreamTcpOk returns a tuple with the NextUpstreamTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetNextUpstreamTcpOk() (*string, bool) {
	if o == nil || IsNil(o.NextUpstreamTcp) {
		return nil, false
	}
	return o.NextUpstreamTcp, true
}

// HasNextUpstreamTcp returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasNextUpstreamTcp() bool {
	if o != nil && !IsNil(o.NextUpstreamTcp) {
		return true
	}

	return false
}

// SetNextUpstreamTcp gets a reference to the given string and assigns it to the NextUpstreamTcp field.
func (o *LoadBalancerSetting) SetNextUpstreamTcp(v string) {
	o.NextUpstreamTcp = &v
}

// GetNextUpstreamTcpCodes returns the NextUpstreamTcpCodes field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetNextUpstreamTcpCodes() NextUpstreamTcpCodes {
	if o == nil || IsNil(o.NextUpstreamTcpCodes) {
		var ret NextUpstreamTcpCodes
		return ret
	}
	return *o.NextUpstreamTcpCodes
}

// GetNextUpstreamTcpCodesOk returns a tuple with the NextUpstreamTcpCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetNextUpstreamTcpCodesOk() (*NextUpstreamTcpCodes, bool) {
	if o == nil || IsNil(o.NextUpstreamTcpCodes) {
		return nil, false
	}
	return o.NextUpstreamTcpCodes, true
}

// HasNextUpstreamTcpCodes returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasNextUpstreamTcpCodes() bool {
	if o != nil && !IsNil(o.NextUpstreamTcpCodes) {
		return true
	}

	return false
}

// SetNextUpstreamTcpCodes gets a reference to the given NextUpstreamTcpCodes and assigns it to the NextUpstreamTcpCodes field.
func (o *LoadBalancerSetting) SetNextUpstreamTcpCodes(v NextUpstreamTcpCodes) {
	o.NextUpstreamTcpCodes = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *LoadBalancerSetting) SetProtocol(v string) {
	o.Protocol = &v
}

// GetKeepalive returns the Keepalive field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetKeepalive() string {
	if o == nil || IsNil(o.Keepalive) {
		var ret string
		return ret
	}
	return *o.Keepalive
}

// GetKeepaliveOk returns a tuple with the Keepalive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetKeepaliveOk() (*string, bool) {
	if o == nil || IsNil(o.Keepalive) {
		return nil, false
	}
	return o.Keepalive, true
}

// HasKeepalive returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasKeepalive() bool {
	if o != nil && !IsNil(o.Keepalive) {
		return true
	}

	return false
}

// SetKeepalive gets a reference to the given string and assigns it to the Keepalive field.
func (o *LoadBalancerSetting) SetKeepalive(v string) {
	o.Keepalive = &v
}

// GetMaxFails returns the MaxFails field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetMaxFails() float32 {
	if o == nil || IsNil(o.MaxFails) {
		var ret float32
		return ret
	}
	return *o.MaxFails
}

// GetMaxFailsOk returns a tuple with the MaxFails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetMaxFailsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxFails) {
		return nil, false
	}
	return o.MaxFails, true
}

// HasMaxFails returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasMaxFails() bool {
	if o != nil && !IsNil(o.MaxFails) {
		return true
	}

	return false
}

// SetMaxFails gets a reference to the given float32 and assigns it to the MaxFails field.
func (o *LoadBalancerSetting) SetMaxFails(v float32) {
	o.MaxFails = &v
}

// GetFailTimeout returns the FailTimeout field value if set, zero value otherwise.
func (o *LoadBalancerSetting) GetFailTimeout() string {
	if o == nil || IsNil(o.FailTimeout) {
		var ret string
		return ret
	}
	return *o.FailTimeout
}

// GetFailTimeoutOk returns a tuple with the FailTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerSetting) GetFailTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.FailTimeout) {
		return nil, false
	}
	return o.FailTimeout, true
}

// HasFailTimeout returns a boolean if a field has been set.
func (o *LoadBalancerSetting) HasFailTimeout() bool {
	if o != nil && !IsNil(o.FailTimeout) {
		return true
	}

	return false
}

// SetFailTimeout gets a reference to the given string and assigns it to the FailTimeout field.
func (o *LoadBalancerSetting) SetFailTimeout(v string) {
	o.FailTimeout = &v
}

func (o LoadBalancerSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.NextUpstreamTcp) {
		toSerialize["next_upstream_tcp"] = o.NextUpstreamTcp
	}
	if !IsNil(o.NextUpstreamTcpCodes) {
		toSerialize["next_upstream_tcp_codes"] = o.NextUpstreamTcpCodes
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Keepalive) {
		toSerialize["keepalive"] = o.Keepalive
	}
	if !IsNil(o.MaxFails) {
		toSerialize["max_fails"] = o.MaxFails
	}
	if !IsNil(o.FailTimeout) {
		toSerialize["fail_timeout"] = o.FailTimeout
	}
	return toSerialize, nil
}

type NullableLoadBalancerSetting struct {
	value *LoadBalancerSetting
	isSet bool
}

func (v NullableLoadBalancerSetting) Get() *LoadBalancerSetting {
	return v.value
}

func (v *NullableLoadBalancerSetting) Set(val *LoadBalancerSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerSetting(val *LoadBalancerSetting) *NullableLoadBalancerSetting {
	return &NullableLoadBalancerSetting{value: val, isSet: true}
}

func (v NullableLoadBalancerSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



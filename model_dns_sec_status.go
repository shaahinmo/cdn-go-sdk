/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnsSecStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsSecStatus{}

// DnsSecStatus struct for DnsSecStatus
type DnsSecStatus struct {
	Enable bool `json:"enable"`
}

type _DnsSecStatus DnsSecStatus

// NewDnsSecStatus instantiates a new DnsSecStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsSecStatus(enable bool) *DnsSecStatus {
	this := DnsSecStatus{}
	this.Enable = enable
	return &this
}

// NewDnsSecStatusWithDefaults instantiates a new DnsSecStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsSecStatusWithDefaults() *DnsSecStatus {
	this := DnsSecStatus{}
	return &this
}

// GetEnable returns the Enable field value
func (o *DnsSecStatus) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *DnsSecStatus) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *DnsSecStatus) SetEnable(v bool) {
	o.Enable = v
}

func (o DnsSecStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsSecStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	return toSerialize, nil
}

func (o *DnsSecStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsSecStatus := _DnsSecStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnsSecStatus)

	if err != nil {
		return err
	}

	*o = DnsSecStatus(varDnsSecStatus)

	return err
}

type NullableDnsSecStatus struct {
	value *DnsSecStatus
	isSet bool
}

func (v NullableDnsSecStatus) Get() *DnsSecStatus {
	return v.value
}

func (v *NullableDnsSecStatus) Set(val *DnsSecStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsSecStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsSecStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsSecStatus(val *DnsSecStatus) *NullableDnsSecStatus {
	return &NullableDnsSecStatus{value: val, isSet: true}
}

func (v NullableDnsSecStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsSecStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



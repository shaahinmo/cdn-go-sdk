/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AggregatedReportsAPIService AggregatedReportsAPI service
type AggregatedReportsAPIService service

type ApiReportsAggregatedChartsRequest struct {
	ctx context.Context
	ApiService *AggregatedReportsAPIService
	domains *string
	reportType *string
	categoryType *string
	pops *string
	asns *string
	period *string
}

// Name of domains. To filter multiple domains separate them using a comma
func (r ApiReportsAggregatedChartsRequest) Domains(domains string) ApiReportsAggregatedChartsRequest {
	r.domains = &domains
	return r
}

// Type of report
func (r ApiReportsAggregatedChartsRequest) ReportType(reportType string) ApiReportsAggregatedChartsRequest {
	r.reportType = &reportType
	return r
}

// Category of report
func (r ApiReportsAggregatedChartsRequest) CategoryType(categoryType string) ApiReportsAggregatedChartsRequest {
	r.categoryType = &categoryType
	return r
}

// Names of a pop sites. To filter multiple pops, separate them using a comma
func (r ApiReportsAggregatedChartsRequest) Pops(pops string) ApiReportsAggregatedChartsRequest {
	r.pops = &pops
	return r
}

// Numbers of ASNs. To filter multiple ASNs, separate them using a comma
func (r ApiReportsAggregatedChartsRequest) Asns(asns string) ApiReportsAggregatedChartsRequest {
	r.asns = &asns
	return r
}

// Select period -ending now- for report
func (r ApiReportsAggregatedChartsRequest) Period(period string) ApiReportsAggregatedChartsRequest {
	r.period = &period
	return r
}

func (r ApiReportsAggregatedChartsRequest) Execute() (*ReportsAggregatedCharts200Response, *http.Response, error) {
	return r.ApiService.ReportsAggregatedChartsExecute(r)
}

/*
ReportsAggregatedCharts Charts of aggregated reports for domains

Show charts of aggregated reports for domains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsAggregatedChartsRequest
*/
func (a *AggregatedReportsAPIService) ReportsAggregatedCharts(ctx context.Context) ApiReportsAggregatedChartsRequest {
	return ApiReportsAggregatedChartsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReportsAggregatedCharts200Response
func (a *AggregatedReportsAPIService) ReportsAggregatedChartsExecute(r ApiReportsAggregatedChartsRequest) (*ReportsAggregatedCharts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportsAggregatedCharts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AggregatedReportsAPIService.ReportsAggregatedCharts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/aggregated/charts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domains", r.domains, "form", "")
	}
	if r.reportType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "report_type", r.reportType, "form", "")
	}
	if r.categoryType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category_type", r.categoryType, "form", "")
	}
	if r.pops != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pops", r.pops, "form", "")
	}
	if r.asns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asns", r.asns, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v MessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v DomainsShow404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsAggregatedDetailsRequest struct {
	ctx context.Context
	ApiService *AggregatedReportsAPIService
	domains *string
	categoryType *string
	pops *string
	asns *string
	period *string
	page *int32
	perPage *int32
}

// Name of domains. To filter multiple domains separate them using a comma
func (r ApiReportsAggregatedDetailsRequest) Domains(domains string) ApiReportsAggregatedDetailsRequest {
	r.domains = &domains
	return r
}

// Category of report
func (r ApiReportsAggregatedDetailsRequest) CategoryType(categoryType string) ApiReportsAggregatedDetailsRequest {
	r.categoryType = &categoryType
	return r
}

// Names of a pop sites. To filter multiple pops, separate them using a comma
func (r ApiReportsAggregatedDetailsRequest) Pops(pops string) ApiReportsAggregatedDetailsRequest {
	r.pops = &pops
	return r
}

// Numbers of ASNs. To filter multiple ASNs, separate them using a comma
func (r ApiReportsAggregatedDetailsRequest) Asns(asns string) ApiReportsAggregatedDetailsRequest {
	r.asns = &asns
	return r
}

// Select period -ending now- for report
func (r ApiReportsAggregatedDetailsRequest) Period(period string) ApiReportsAggregatedDetailsRequest {
	r.period = &period
	return r
}

// Set the desired page number
func (r ApiReportsAggregatedDetailsRequest) Page(page int32) ApiReportsAggregatedDetailsRequest {
	r.page = &page
	return r
}

// Set how many items returned per page
func (r ApiReportsAggregatedDetailsRequest) PerPage(perPage int32) ApiReportsAggregatedDetailsRequest {
	r.perPage = &perPage
	return r
}

func (r ApiReportsAggregatedDetailsRequest) Execute() (*ReportsAggregatedDetails200Response, *http.Response, error) {
	return r.ApiService.ReportsAggregatedDetailsExecute(r)
}

/*
ReportsAggregatedDetails List of aggregated reports for domains

Get the list of aggregated reports for domains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsAggregatedDetailsRequest
*/
func (a *AggregatedReportsAPIService) ReportsAggregatedDetails(ctx context.Context) ApiReportsAggregatedDetailsRequest {
	return ApiReportsAggregatedDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReportsAggregatedDetails200Response
func (a *AggregatedReportsAPIService) ReportsAggregatedDetailsExecute(r ApiReportsAggregatedDetailsRequest) (*ReportsAggregatedDetails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportsAggregatedDetails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AggregatedReportsAPIService.ReportsAggregatedDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/aggregated/details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domains", r.domains, "form", "")
	}
	if r.categoryType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category_type", r.categoryType, "form", "")
	}
	if r.pops != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pops", r.pops, "form", "")
	}
	if r.asns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asns", r.asns, "form", "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v MessageResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v DomainsShow404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsAggregatedFiltersRequest struct {
	ctx context.Context
	ApiService *AggregatedReportsAPIService
	domains *string
}

// Name of domains. To filter multiple domains separate them using a comma
func (r ApiReportsAggregatedFiltersRequest) Domains(domains string) ApiReportsAggregatedFiltersRequest {
	r.domains = &domains
	return r
}

func (r ApiReportsAggregatedFiltersRequest) Execute() (*ReportsAggregatedFilters200Response, *http.Response, error) {
	return r.ApiService.ReportsAggregatedFiltersExecute(r)
}

/*
ReportsAggregatedFilters Combined filtering data for aggregated reports

Get the list of combined filtering data for each domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsAggregatedFiltersRequest
*/
func (a *AggregatedReportsAPIService) ReportsAggregatedFilters(ctx context.Context) ApiReportsAggregatedFiltersRequest {
	return ApiReportsAggregatedFiltersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReportsAggregatedFilters200Response
func (a *AggregatedReportsAPIService) ReportsAggregatedFiltersExecute(r ApiReportsAggregatedFiltersRequest) (*ReportsAggregatedFilters200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportsAggregatedFilters200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AggregatedReportsAPIService.ReportsAggregatedFilters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/aggregated/filters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domains != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domains", r.domains, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v DomainsShow404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

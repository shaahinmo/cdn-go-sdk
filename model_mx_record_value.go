/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MXRecordValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MXRecordValue{}

// MXRecordValue struct for MXRecordValue
type MXRecordValue struct {
	Host string `json:"host" validate:"regexp=^([a-zA-Z0-9._-])+$"`
	Priority NullableInt32 `json:"priority"`
}

type _MXRecordValue MXRecordValue

// NewMXRecordValue instantiates a new MXRecordValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMXRecordValue(host string, priority NullableInt32) *MXRecordValue {
	this := MXRecordValue{}
	this.Host = host
	this.Priority = priority
	return &this
}

// NewMXRecordValueWithDefaults instantiates a new MXRecordValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMXRecordValueWithDefaults() *MXRecordValue {
	this := MXRecordValue{}
	return &this
}

// GetHost returns the Host field value
func (o *MXRecordValue) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *MXRecordValue) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *MXRecordValue) SetHost(v string) {
	o.Host = v
}

// GetPriority returns the Priority field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *MXRecordValue) GetPriority() int32 {
	if o == nil || o.Priority.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MXRecordValue) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// SetPriority sets field value
func (o *MXRecordValue) SetPriority(v int32) {
	o.Priority.Set(&v)
}

func (o MXRecordValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MXRecordValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["priority"] = o.Priority.Get()
	return toSerialize, nil
}

func (o *MXRecordValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMXRecordValue := _MXRecordValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMXRecordValue)

	if err != nil {
		return err
	}

	*o = MXRecordValue(varMXRecordValue)

	return err
}

type NullableMXRecordValue struct {
	value *MXRecordValue
	isSet bool
}

func (v NullableMXRecordValue) Get() *MXRecordValue {
	return v.value
}

func (v *NullableMXRecordValue) Set(val *MXRecordValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMXRecordValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMXRecordValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMXRecordValue(val *MXRecordValue) *NullableMXRecordValue {
	return &NullableMXRecordValue{value: val, isSet: true}
}

func (v NullableMXRecordValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMXRecordValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogForwarder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogForwarder{}

// LogForwarder struct for LogForwarder
type LogForwarder struct {
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Description string `json:"description"`
	Type string `json:"type"`
	ConnectionType string `json:"connection_type"`
	// Deprecated
	DataFormat *LogForwarderDataFormat `json:"data_format,omitempty"`
	// Expr expression language
	DataFormatExpr *string `json:"data_format_expr,omitempty"`
	Settings LogForwarderSetting `json:"settings"`
	Status bool `json:"status"`
}

type _LogForwarder LogForwarder

// NewLogForwarder instantiates a new LogForwarder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogForwarder(name string, description string, type_ string, connectionType string, settings LogForwarderSetting, status bool) *LogForwarder {
	this := LogForwarder{}
	this.Name = name
	this.Description = description
	this.Type = type_
	this.ConnectionType = connectionType
	this.Settings = settings
	this.Status = status
	return &this
}

// NewLogForwarderWithDefaults instantiates a new LogForwarder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogForwarderWithDefaults() *LogForwarder {
	this := LogForwarder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LogForwarder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LogForwarder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LogForwarder) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *LogForwarder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogForwarder) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *LogForwarder) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LogForwarder) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *LogForwarder) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LogForwarder) SetType(v string) {
	o.Type = v
}

// GetConnectionType returns the ConnectionType field value
func (o *LogForwarder) GetConnectionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *LogForwarder) SetConnectionType(v string) {
	o.ConnectionType = v
}

// GetDataFormat returns the DataFormat field value if set, zero value otherwise.
// Deprecated
func (o *LogForwarder) GetDataFormat() LogForwarderDataFormat {
	if o == nil || IsNil(o.DataFormat) {
		var ret LogForwarderDataFormat
		return ret
	}
	return *o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *LogForwarder) GetDataFormatOk() (*LogForwarderDataFormat, bool) {
	if o == nil || IsNil(o.DataFormat) {
		return nil, false
	}
	return o.DataFormat, true
}

// HasDataFormat returns a boolean if a field has been set.
func (o *LogForwarder) HasDataFormat() bool {
	if o != nil && !IsNil(o.DataFormat) {
		return true
	}

	return false
}

// SetDataFormat gets a reference to the given LogForwarderDataFormat and assigns it to the DataFormat field.
// Deprecated
func (o *LogForwarder) SetDataFormat(v LogForwarderDataFormat) {
	o.DataFormat = &v
}

// GetDataFormatExpr returns the DataFormatExpr field value if set, zero value otherwise.
func (o *LogForwarder) GetDataFormatExpr() string {
	if o == nil || IsNil(o.DataFormatExpr) {
		var ret string
		return ret
	}
	return *o.DataFormatExpr
}

// GetDataFormatExprOk returns a tuple with the DataFormatExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetDataFormatExprOk() (*string, bool) {
	if o == nil || IsNil(o.DataFormatExpr) {
		return nil, false
	}
	return o.DataFormatExpr, true
}

// HasDataFormatExpr returns a boolean if a field has been set.
func (o *LogForwarder) HasDataFormatExpr() bool {
	if o != nil && !IsNil(o.DataFormatExpr) {
		return true
	}

	return false
}

// SetDataFormatExpr gets a reference to the given string and assigns it to the DataFormatExpr field.
func (o *LogForwarder) SetDataFormatExpr(v string) {
	o.DataFormatExpr = &v
}

// GetSettings returns the Settings field value
func (o *LogForwarder) GetSettings() LogForwarderSetting {
	if o == nil {
		var ret LogForwarderSetting
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetSettingsOk() (*LogForwarderSetting, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *LogForwarder) SetSettings(v LogForwarderSetting) {
	o.Settings = v
}

// GetStatus returns the Status field value
func (o *LogForwarder) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LogForwarder) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LogForwarder) SetStatus(v bool) {
	o.Status = v
}

func (o LogForwarder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogForwarder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	toSerialize["connection_type"] = o.ConnectionType
	if !IsNil(o.DataFormat) {
		toSerialize["data_format"] = o.DataFormat
	}
	if !IsNil(o.DataFormatExpr) {
		toSerialize["data_format_expr"] = o.DataFormatExpr
	}
	toSerialize["settings"] = o.Settings
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *LogForwarder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"type",
		"connection_type",
		"settings",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogForwarder := _LogForwarder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogForwarder)

	if err != nil {
		return err
	}

	*o = LogForwarder(varLogForwarder)

	return err
}

type NullableLogForwarder struct {
	value *LogForwarder
	isSet bool
}

func (v NullableLogForwarder) Get() *LogForwarder {
	return v.value
}

func (v *NullableLogForwarder) Set(val *LogForwarder) {
	v.value = val
	v.isSet = true
}

func (v NullableLogForwarder) IsSet() bool {
	return v.isSet
}

func (v *NullableLogForwarder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogForwarder(val *LogForwarder) *NullableLogForwarder {
	return &NullableLogForwarder{value: val, isSet: true}
}

func (v NullableLogForwarder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogForwarder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



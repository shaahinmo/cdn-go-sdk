/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateOrderIssueRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateOrderIssueRequest{}

// CertificateOrderIssueRequest struct for CertificateOrderIssueRequest
type CertificateOrderIssueRequest struct {
	Domains []CertificateOrderIssueRequestDomainsInner `json:"domains"`
	ProductId string `json:"product_id"`
}

type _CertificateOrderIssueRequest CertificateOrderIssueRequest

// NewCertificateOrderIssueRequest instantiates a new CertificateOrderIssueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateOrderIssueRequest(domains []CertificateOrderIssueRequestDomainsInner, productId string) *CertificateOrderIssueRequest {
	this := CertificateOrderIssueRequest{}
	this.Domains = domains
	this.ProductId = productId
	return &this
}

// NewCertificateOrderIssueRequestWithDefaults instantiates a new CertificateOrderIssueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateOrderIssueRequestWithDefaults() *CertificateOrderIssueRequest {
	this := CertificateOrderIssueRequest{}
	return &this
}

// GetDomains returns the Domains field value
func (o *CertificateOrderIssueRequest) GetDomains() []CertificateOrderIssueRequestDomainsInner {
	if o == nil {
		var ret []CertificateOrderIssueRequestDomainsInner
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderIssueRequest) GetDomainsOk() ([]CertificateOrderIssueRequestDomainsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *CertificateOrderIssueRequest) SetDomains(v []CertificateOrderIssueRequestDomainsInner) {
	o.Domains = v
}

// GetProductId returns the ProductId field value
func (o *CertificateOrderIssueRequest) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderIssueRequest) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CertificateOrderIssueRequest) SetProductId(v string) {
	o.ProductId = v
}

func (o CertificateOrderIssueRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateOrderIssueRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domains"] = o.Domains
	toSerialize["product_id"] = o.ProductId
	return toSerialize, nil
}

func (o *CertificateOrderIssueRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domains",
		"product_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateOrderIssueRequest := _CertificateOrderIssueRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateOrderIssueRequest)

	if err != nil {
		return err
	}

	*o = CertificateOrderIssueRequest(varCertificateOrderIssueRequest)

	return err
}

type NullableCertificateOrderIssueRequest struct {
	value *CertificateOrderIssueRequest
	isSet bool
}

func (v NullableCertificateOrderIssueRequest) Get() *CertificateOrderIssueRequest {
	return v.value
}

func (v *NullableCertificateOrderIssueRequest) Set(val *CertificateOrderIssueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOrderIssueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOrderIssueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOrderIssueRequest(val *CertificateOrderIssueRequest) *NullableCertificateOrderIssueRequest {
	return &NullableCertificateOrderIssueRequest{value: val, isSet: true}
}

func (v NullableCertificateOrderIssueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOrderIssueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



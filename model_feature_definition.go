/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the FeatureDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureDefinition{}

// FeatureDefinition struct for FeatureDefinition
type FeatureDefinition struct {
	Id *string `json:"id,omitempty"`
	Plans *FeatureDefinitionPlans `json:"plans,omitempty"`
	Meta *FeatureDefinitionMeta `json:"meta,omitempty"`
}

// NewFeatureDefinition instantiates a new FeatureDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureDefinition() *FeatureDefinition {
	this := FeatureDefinition{}
	return &this
}

// NewFeatureDefinitionWithDefaults instantiates a new FeatureDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureDefinitionWithDefaults() *FeatureDefinition {
	this := FeatureDefinition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FeatureDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FeatureDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FeatureDefinition) SetId(v string) {
	o.Id = &v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *FeatureDefinition) GetPlans() FeatureDefinitionPlans {
	if o == nil || IsNil(o.Plans) {
		var ret FeatureDefinitionPlans
		return ret
	}
	return *o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureDefinition) GetPlansOk() (*FeatureDefinitionPlans, bool) {
	if o == nil || IsNil(o.Plans) {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *FeatureDefinition) HasPlans() bool {
	if o != nil && !IsNil(o.Plans) {
		return true
	}

	return false
}

// SetPlans gets a reference to the given FeatureDefinitionPlans and assigns it to the Plans field.
func (o *FeatureDefinition) SetPlans(v FeatureDefinitionPlans) {
	o.Plans = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FeatureDefinition) GetMeta() FeatureDefinitionMeta {
	if o == nil || IsNil(o.Meta) {
		var ret FeatureDefinitionMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureDefinition) GetMetaOk() (*FeatureDefinitionMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FeatureDefinition) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given FeatureDefinitionMeta and assigns it to the Meta field.
func (o *FeatureDefinition) SetMeta(v FeatureDefinitionMeta) {
	o.Meta = &v
}

func (o FeatureDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Plans) {
		toSerialize["plans"] = o.Plans
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableFeatureDefinition struct {
	value *FeatureDefinition
	isSet bool
}

func (v NullableFeatureDefinition) Get() *FeatureDefinition {
	return v.value
}

func (v *NullableFeatureDefinition) Set(val *FeatureDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureDefinition(val *FeatureDefinition) *NullableFeatureDefinition {
	return &NullableFeatureDefinition{value: val, isSet: true}
}

func (v NullableFeatureDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



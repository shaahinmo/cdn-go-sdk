/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the WafSettingsLogRedaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WafSettingsLogRedaction{}

// WafSettingsLogRedaction The LogRedaction configuration is used to control which parts of the Web Application Firewall (WAF) logs are redacted (hidden or replaced) to protect sensitive information.
type WafSettingsLogRedaction struct {
	// List of cookie names to redact.
	Cookies []string `json:"cookies,omitempty"`
	// List of header names to redact.
	Headers []string `json:"headers,omitempty"`
	// Redact all headers if true.
	AllHeaders *bool `json:"all_headers,omitempty"`
	// Redact the request body if true.
	Body *bool `json:"body,omitempty"`
	// Redacts specific log entries or entire log records. When enabled, fields within log records may be hidden or replaced with a placeholder. 
	Records *bool `json:"records,omitempty"`
	// String to replace redacted values.
	ReplacementString *string `json:"replacement_string,omitempty"`
}

// NewWafSettingsLogRedaction instantiates a new WafSettingsLogRedaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafSettingsLogRedaction() *WafSettingsLogRedaction {
	this := WafSettingsLogRedaction{}
	var allHeaders bool = false
	this.AllHeaders = &allHeaders
	var body bool = true
	this.Body = &body
	var records bool = false
	this.Records = &records
	var replacementString string = "--REDACTED--"
	this.ReplacementString = &replacementString
	return &this
}

// NewWafSettingsLogRedactionWithDefaults instantiates a new WafSettingsLogRedaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafSettingsLogRedactionWithDefaults() *WafSettingsLogRedaction {
	this := WafSettingsLogRedaction{}
	var allHeaders bool = false
	this.AllHeaders = &allHeaders
	var body bool = true
	this.Body = &body
	var records bool = false
	this.Records = &records
	var replacementString string = "--REDACTED--"
	this.ReplacementString = &replacementString
	return &this
}

// GetCookies returns the Cookies field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetCookies() []string {
	if o == nil || IsNil(o.Cookies) {
		var ret []string
		return ret
	}
	return o.Cookies
}

// GetCookiesOk returns a tuple with the Cookies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetCookiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cookies) {
		return nil, false
	}
	return o.Cookies, true
}

// HasCookies returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasCookies() bool {
	if o != nil && !IsNil(o.Cookies) {
		return true
	}

	return false
}

// SetCookies gets a reference to the given []string and assigns it to the Cookies field.
func (o *WafSettingsLogRedaction) SetCookies(v []string) {
	o.Cookies = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetHeaders() []string {
	if o == nil || IsNil(o.Headers) {
		var ret []string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []string and assigns it to the Headers field.
func (o *WafSettingsLogRedaction) SetHeaders(v []string) {
	o.Headers = v
}

// GetAllHeaders returns the AllHeaders field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetAllHeaders() bool {
	if o == nil || IsNil(o.AllHeaders) {
		var ret bool
		return ret
	}
	return *o.AllHeaders
}

// GetAllHeadersOk returns a tuple with the AllHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetAllHeadersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllHeaders) {
		return nil, false
	}
	return o.AllHeaders, true
}

// HasAllHeaders returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasAllHeaders() bool {
	if o != nil && !IsNil(o.AllHeaders) {
		return true
	}

	return false
}

// SetAllHeaders gets a reference to the given bool and assigns it to the AllHeaders field.
func (o *WafSettingsLogRedaction) SetAllHeaders(v bool) {
	o.AllHeaders = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetBody() bool {
	if o == nil || IsNil(o.Body) {
		var ret bool
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetBodyOk() (*bool, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given bool and assigns it to the Body field.
func (o *WafSettingsLogRedaction) SetBody(v bool) {
	o.Body = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetRecords() bool {
	if o == nil || IsNil(o.Records) {
		var ret bool
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetRecordsOk() (*bool, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given bool and assigns it to the Records field.
func (o *WafSettingsLogRedaction) SetRecords(v bool) {
	o.Records = &v
}

// GetReplacementString returns the ReplacementString field value if set, zero value otherwise.
func (o *WafSettingsLogRedaction) GetReplacementString() string {
	if o == nil || IsNil(o.ReplacementString) {
		var ret string
		return ret
	}
	return *o.ReplacementString
}

// GetReplacementStringOk returns a tuple with the ReplacementString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsLogRedaction) GetReplacementStringOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacementString) {
		return nil, false
	}
	return o.ReplacementString, true
}

// HasReplacementString returns a boolean if a field has been set.
func (o *WafSettingsLogRedaction) HasReplacementString() bool {
	if o != nil && !IsNil(o.ReplacementString) {
		return true
	}

	return false
}

// SetReplacementString gets a reference to the given string and assigns it to the ReplacementString field.
func (o *WafSettingsLogRedaction) SetReplacementString(v string) {
	o.ReplacementString = &v
}

func (o WafSettingsLogRedaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WafSettingsLogRedaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cookies) {
		toSerialize["cookies"] = o.Cookies
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.AllHeaders) {
		toSerialize["all_headers"] = o.AllHeaders
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.ReplacementString) {
		toSerialize["replacement_string"] = o.ReplacementString
	}
	return toSerialize, nil
}

type NullableWafSettingsLogRedaction struct {
	value *WafSettingsLogRedaction
	isSet bool
}

func (v NullableWafSettingsLogRedaction) Get() *WafSettingsLogRedaction {
	return v.value
}

func (v *NullableWafSettingsLogRedaction) Set(val *WafSettingsLogRedaction) {
	v.value = val
	v.isSet = true
}

func (v NullableWafSettingsLogRedaction) IsSet() bool {
	return v.isSet
}

func (v *NullableWafSettingsLogRedaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafSettingsLogRedaction(val *WafSettingsLogRedaction) *NullableWafSettingsLogRedaction {
	return &NullableWafSettingsLogRedaction{value: val, isSet: true}
}

func (v NullableWafSettingsLogRedaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafSettingsLogRedaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



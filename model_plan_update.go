/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanUpdate{}

// PlanUpdate struct for PlanUpdate
type PlanUpdate struct {
	// - `0` - Traffic - `1` - Basic - `2` - Growth - `3` - Professional - `4` - Enterprise - Subdomains require to have Growth plan or higher 
	PlanLevel int32 `json:"plan_level"`
	// - `0` - Normal - `6` - Six month prepaid - `12` - Twelve month prepaid - Prepaid subscription is available for Growth and Professional plan. 
	PlanDuration *int32 `json:"plan_duration,omitempty"`
}

type _PlanUpdate PlanUpdate

// NewPlanUpdate instantiates a new PlanUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdate(planLevel int32) *PlanUpdate {
	this := PlanUpdate{}
	this.PlanLevel = planLevel
	return &this
}

// NewPlanUpdateWithDefaults instantiates a new PlanUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateWithDefaults() *PlanUpdate {
	this := PlanUpdate{}
	return &this
}

// GetPlanLevel returns the PlanLevel field value
func (o *PlanUpdate) GetPlanLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlanLevel
}

// GetPlanLevelOk returns a tuple with the PlanLevel field value
// and a boolean to check if the value has been set.
func (o *PlanUpdate) GetPlanLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanLevel, true
}

// SetPlanLevel sets field value
func (o *PlanUpdate) SetPlanLevel(v int32) {
	o.PlanLevel = v
}

// GetPlanDuration returns the PlanDuration field value if set, zero value otherwise.
func (o *PlanUpdate) GetPlanDuration() int32 {
	if o == nil || IsNil(o.PlanDuration) {
		var ret int32
		return ret
	}
	return *o.PlanDuration
}

// GetPlanDurationOk returns a tuple with the PlanDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdate) GetPlanDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.PlanDuration) {
		return nil, false
	}
	return o.PlanDuration, true
}

// HasPlanDuration returns a boolean if a field has been set.
func (o *PlanUpdate) HasPlanDuration() bool {
	if o != nil && !IsNil(o.PlanDuration) {
		return true
	}

	return false
}

// SetPlanDuration gets a reference to the given int32 and assigns it to the PlanDuration field.
func (o *PlanUpdate) SetPlanDuration(v int32) {
	o.PlanDuration = &v
}

func (o PlanUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plan_level"] = o.PlanLevel
	if !IsNil(o.PlanDuration) {
		toSerialize["plan_duration"] = o.PlanDuration
	}
	return toSerialize, nil
}

func (o *PlanUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan_level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanUpdate := _PlanUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanUpdate)

	if err != nil {
		return err
	}

	*o = PlanUpdate(varPlanUpdate)

	return err
}

type NullablePlanUpdate struct {
	value *PlanUpdate
	isSet bool
}

func (v NullablePlanUpdate) Get() *PlanUpdate {
	return v.value
}

func (v *NullablePlanUpdate) Set(val *PlanUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdate(val *PlanUpdate) *NullablePlanUpdate {
	return &NullablePlanUpdate{value: val, isSet: true}
}

func (v NullablePlanUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



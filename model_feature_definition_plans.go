/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the FeatureDefinitionPlans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureDefinitionPlans{}

// FeatureDefinitionPlans struct for FeatureDefinitionPlans
type FeatureDefinitionPlans struct {
	Var0 NullableFeaturePlanDefinition `json:"0,omitempty"`
	Var1 NullableFeaturePlanDefinition `json:"1,omitempty"`
	Var2 NullableFeaturePlanDefinition `json:"2,omitempty"`
	Var3 NullableFeaturePlanDefinition `json:"3,omitempty"`
	Var4 NullableFeaturePlanDefinition `json:"4,omitempty"`
}

// NewFeatureDefinitionPlans instantiates a new FeatureDefinitionPlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureDefinitionPlans() *FeatureDefinitionPlans {
	this := FeatureDefinitionPlans{}
	return &this
}

// NewFeatureDefinitionPlansWithDefaults instantiates a new FeatureDefinitionPlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureDefinitionPlansWithDefaults() *FeatureDefinitionPlans {
	this := FeatureDefinitionPlans{}
	return &this
}

// GetVar0 returns the Var0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureDefinitionPlans) GetVar0() FeaturePlanDefinition {
	if o == nil || IsNil(o.Var0.Get()) {
		var ret FeaturePlanDefinition
		return ret
	}
	return *o.Var0.Get()
}

// GetVar0Ok returns a tuple with the Var0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureDefinitionPlans) GetVar0Ok() (*FeaturePlanDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var0.Get(), o.Var0.IsSet()
}

// HasVar0 returns a boolean if a field has been set.
func (o *FeatureDefinitionPlans) HasVar0() bool {
	if o != nil && o.Var0.IsSet() {
		return true
	}

	return false
}

// SetVar0 gets a reference to the given NullableFeaturePlanDefinition and assigns it to the Var0 field.
func (o *FeatureDefinitionPlans) SetVar0(v FeaturePlanDefinition) {
	o.Var0.Set(&v)
}
// SetVar0Nil sets the value for Var0 to be an explicit nil
func (o *FeatureDefinitionPlans) SetVar0Nil() {
	o.Var0.Set(nil)
}

// UnsetVar0 ensures that no value is present for Var0, not even an explicit nil
func (o *FeatureDefinitionPlans) UnsetVar0() {
	o.Var0.Unset()
}

// GetVar1 returns the Var1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureDefinitionPlans) GetVar1() FeaturePlanDefinition {
	if o == nil || IsNil(o.Var1.Get()) {
		var ret FeaturePlanDefinition
		return ret
	}
	return *o.Var1.Get()
}

// GetVar1Ok returns a tuple with the Var1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureDefinitionPlans) GetVar1Ok() (*FeaturePlanDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var1.Get(), o.Var1.IsSet()
}

// HasVar1 returns a boolean if a field has been set.
func (o *FeatureDefinitionPlans) HasVar1() bool {
	if o != nil && o.Var1.IsSet() {
		return true
	}

	return false
}

// SetVar1 gets a reference to the given NullableFeaturePlanDefinition and assigns it to the Var1 field.
func (o *FeatureDefinitionPlans) SetVar1(v FeaturePlanDefinition) {
	o.Var1.Set(&v)
}
// SetVar1Nil sets the value for Var1 to be an explicit nil
func (o *FeatureDefinitionPlans) SetVar1Nil() {
	o.Var1.Set(nil)
}

// UnsetVar1 ensures that no value is present for Var1, not even an explicit nil
func (o *FeatureDefinitionPlans) UnsetVar1() {
	o.Var1.Unset()
}

// GetVar2 returns the Var2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureDefinitionPlans) GetVar2() FeaturePlanDefinition {
	if o == nil || IsNil(o.Var2.Get()) {
		var ret FeaturePlanDefinition
		return ret
	}
	return *o.Var2.Get()
}

// GetVar2Ok returns a tuple with the Var2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureDefinitionPlans) GetVar2Ok() (*FeaturePlanDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var2.Get(), o.Var2.IsSet()
}

// HasVar2 returns a boolean if a field has been set.
func (o *FeatureDefinitionPlans) HasVar2() bool {
	if o != nil && o.Var2.IsSet() {
		return true
	}

	return false
}

// SetVar2 gets a reference to the given NullableFeaturePlanDefinition and assigns it to the Var2 field.
func (o *FeatureDefinitionPlans) SetVar2(v FeaturePlanDefinition) {
	o.Var2.Set(&v)
}
// SetVar2Nil sets the value for Var2 to be an explicit nil
func (o *FeatureDefinitionPlans) SetVar2Nil() {
	o.Var2.Set(nil)
}

// UnsetVar2 ensures that no value is present for Var2, not even an explicit nil
func (o *FeatureDefinitionPlans) UnsetVar2() {
	o.Var2.Unset()
}

// GetVar3 returns the Var3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureDefinitionPlans) GetVar3() FeaturePlanDefinition {
	if o == nil || IsNil(o.Var3.Get()) {
		var ret FeaturePlanDefinition
		return ret
	}
	return *o.Var3.Get()
}

// GetVar3Ok returns a tuple with the Var3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureDefinitionPlans) GetVar3Ok() (*FeaturePlanDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var3.Get(), o.Var3.IsSet()
}

// HasVar3 returns a boolean if a field has been set.
func (o *FeatureDefinitionPlans) HasVar3() bool {
	if o != nil && o.Var3.IsSet() {
		return true
	}

	return false
}

// SetVar3 gets a reference to the given NullableFeaturePlanDefinition and assigns it to the Var3 field.
func (o *FeatureDefinitionPlans) SetVar3(v FeaturePlanDefinition) {
	o.Var3.Set(&v)
}
// SetVar3Nil sets the value for Var3 to be an explicit nil
func (o *FeatureDefinitionPlans) SetVar3Nil() {
	o.Var3.Set(nil)
}

// UnsetVar3 ensures that no value is present for Var3, not even an explicit nil
func (o *FeatureDefinitionPlans) UnsetVar3() {
	o.Var3.Unset()
}

// GetVar4 returns the Var4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureDefinitionPlans) GetVar4() FeaturePlanDefinition {
	if o == nil || IsNil(o.Var4.Get()) {
		var ret FeaturePlanDefinition
		return ret
	}
	return *o.Var4.Get()
}

// GetVar4Ok returns a tuple with the Var4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureDefinitionPlans) GetVar4Ok() (*FeaturePlanDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Var4.Get(), o.Var4.IsSet()
}

// HasVar4 returns a boolean if a field has been set.
func (o *FeatureDefinitionPlans) HasVar4() bool {
	if o != nil && o.Var4.IsSet() {
		return true
	}

	return false
}

// SetVar4 gets a reference to the given NullableFeaturePlanDefinition and assigns it to the Var4 field.
func (o *FeatureDefinitionPlans) SetVar4(v FeaturePlanDefinition) {
	o.Var4.Set(&v)
}
// SetVar4Nil sets the value for Var4 to be an explicit nil
func (o *FeatureDefinitionPlans) SetVar4Nil() {
	o.Var4.Set(nil)
}

// UnsetVar4 ensures that no value is present for Var4, not even an explicit nil
func (o *FeatureDefinitionPlans) UnsetVar4() {
	o.Var4.Unset()
}

func (o FeatureDefinitionPlans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureDefinitionPlans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Var0.IsSet() {
		toSerialize["0"] = o.Var0.Get()
	}
	if o.Var1.IsSet() {
		toSerialize["1"] = o.Var1.Get()
	}
	if o.Var2.IsSet() {
		toSerialize["2"] = o.Var2.Get()
	}
	if o.Var3.IsSet() {
		toSerialize["3"] = o.Var3.Get()
	}
	if o.Var4.IsSet() {
		toSerialize["4"] = o.Var4.Get()
	}
	return toSerialize, nil
}

type NullableFeatureDefinitionPlans struct {
	value *FeatureDefinitionPlans
	isSet bool
}

func (v NullableFeatureDefinitionPlans) Get() *FeatureDefinitionPlans {
	return v.value
}

func (v *NullableFeatureDefinitionPlans) Set(val *FeatureDefinitionPlans) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureDefinitionPlans) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureDefinitionPlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureDefinitionPlans(val *FeatureDefinitionPlans) *NullableFeatureDefinitionPlans {
	return &NullableFeatureDefinitionPlans{value: val, isSet: true}
}

func (v NullableFeatureDefinitionPlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureDefinitionPlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



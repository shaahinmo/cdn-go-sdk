/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdn-api

import (
	"encoding/json"
)

// checks if the SSLProblem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSLProblem{}

// SSLProblem struct for SSLProblem
type SSLProblem struct {
	// A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`
	// The HTTP status code generated by the origin server for this occurrence of the problem
	Status *string `json:"status,omitempty"`
	Subproblems []Subproblem `json:"subproblems,omitempty"`
}

// NewSSLProblem instantiates a new SSLProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLProblem() *SSLProblem {
	this := SSLProblem{}
	return &this
}

// NewSSLProblemWithDefaults instantiates a new SSLProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLProblemWithDefaults() *SSLProblem {
	this := SSLProblem{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SSLProblem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLProblem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SSLProblem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SSLProblem) SetType(v string) {
	o.Type = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *SSLProblem) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLProblem) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *SSLProblem) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *SSLProblem) SetDetail(v string) {
	o.Detail = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SSLProblem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLProblem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SSLProblem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SSLProblem) SetStatus(v string) {
	o.Status = &v
}

// GetSubproblems returns the Subproblems field value if set, zero value otherwise.
func (o *SSLProblem) GetSubproblems() []Subproblem {
	if o == nil || IsNil(o.Subproblems) {
		var ret []Subproblem
		return ret
	}
	return o.Subproblems
}

// GetSubproblemsOk returns a tuple with the Subproblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLProblem) GetSubproblemsOk() ([]Subproblem, bool) {
	if o == nil || IsNil(o.Subproblems) {
		return nil, false
	}
	return o.Subproblems, true
}

// HasSubproblems returns a boolean if a field has been set.
func (o *SSLProblem) HasSubproblems() bool {
	if o != nil && !IsNil(o.Subproblems) {
		return true
	}

	return false
}

// SetSubproblems gets a reference to the given []Subproblem and assigns it to the Subproblems field.
func (o *SSLProblem) SetSubproblems(v []Subproblem) {
	o.Subproblems = v
}

func (o SSLProblem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSLProblem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Subproblems) {
		toSerialize["subproblems"] = o.Subproblems
	}
	return toSerialize, nil
}

type NullableSSLProblem struct {
	value *SSLProblem
	isSet bool
}

func (v NullableSSLProblem) Get() *SSLProblem {
	return v.value
}

func (v *NullableSSLProblem) Set(val *SSLProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLProblem(val *SSLProblem) *NullableSSLProblem {
	return &NullableSSLProblem{value: val, isSet: true}
}

func (v NullableSSLProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



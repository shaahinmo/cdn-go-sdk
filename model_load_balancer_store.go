/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoadBalancerStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerStore{}

// LoadBalancerStore struct for LoadBalancerStore
type LoadBalancerStore struct {
	Name string `json:"name" validate:"regexp=^[A-Za-z0-9-]+$"`
	Description *string `json:"description,omitempty"`
	Status bool `json:"status"`
	// Human friendly time duration for which a pool will uninterruptedly be selected in cluster_rr strategy, i.e. pools will switch once every time slice.
	TimeSlice *string `json:"time_slice,omitempty"`
	Method string `json:"method"`
}

type _LoadBalancerStore LoadBalancerStore

// NewLoadBalancerStore instantiates a new LoadBalancerStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerStore(name string, status bool, method string) *LoadBalancerStore {
	this := LoadBalancerStore{}
	this.Name = name
	this.Status = status
	var timeSlice string = "0s"
	this.TimeSlice = &timeSlice
	this.Method = method
	return &this
}

// NewLoadBalancerStoreWithDefaults instantiates a new LoadBalancerStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerStoreWithDefaults() *LoadBalancerStore {
	this := LoadBalancerStore{}
	var timeSlice string = "0s"
	this.TimeSlice = &timeSlice
	return &this
}

// GetName returns the Name field value
func (o *LoadBalancerStore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerStore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LoadBalancerStore) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LoadBalancerStore) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerStore) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LoadBalancerStore) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LoadBalancerStore) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value
func (o *LoadBalancerStore) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerStore) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LoadBalancerStore) SetStatus(v bool) {
	o.Status = v
}

// GetTimeSlice returns the TimeSlice field value if set, zero value otherwise.
func (o *LoadBalancerStore) GetTimeSlice() string {
	if o == nil || IsNil(o.TimeSlice) {
		var ret string
		return ret
	}
	return *o.TimeSlice
}

// GetTimeSliceOk returns a tuple with the TimeSlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerStore) GetTimeSliceOk() (*string, bool) {
	if o == nil || IsNil(o.TimeSlice) {
		return nil, false
	}
	return o.TimeSlice, true
}

// HasTimeSlice returns a boolean if a field has been set.
func (o *LoadBalancerStore) HasTimeSlice() bool {
	if o != nil && !IsNil(o.TimeSlice) {
		return true
	}

	return false
}

// SetTimeSlice gets a reference to the given string and assigns it to the TimeSlice field.
func (o *LoadBalancerStore) SetTimeSlice(v string) {
	o.TimeSlice = &v
}

// GetMethod returns the Method field value
func (o *LoadBalancerStore) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *LoadBalancerStore) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *LoadBalancerStore) SetMethod(v string) {
	o.Method = v
}

func (o LoadBalancerStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TimeSlice) {
		toSerialize["time_slice"] = o.TimeSlice
	}
	toSerialize["method"] = o.Method
	return toSerialize, nil
}

func (o *LoadBalancerStore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"method",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadBalancerStore := _LoadBalancerStore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadBalancerStore)

	if err != nil {
		return err
	}

	*o = LoadBalancerStore(varLoadBalancerStore)

	return err
}

type NullableLoadBalancerStore struct {
	value *LoadBalancerStore
	isSet bool
}

func (v NullableLoadBalancerStore) Get() *LoadBalancerStore {
	return v.value
}

func (v *NullableLoadBalancerStore) Set(val *LoadBalancerStore) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerStore) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerStore(val *LoadBalancerStore) *NullableLoadBalancerStore {
	return &NullableLoadBalancerStore{value: val, isSet: true}
}

func (v NullableLoadBalancerStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



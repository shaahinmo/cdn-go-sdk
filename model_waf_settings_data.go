/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
)

// checks if the WafSettingsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WafSettingsData{}

// WafSettingsData struct for WafSettingsData
type WafSettingsData struct {
	Data *WafSettings `json:"data,omitempty"`
}

// NewWafSettingsData instantiates a new WafSettingsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafSettingsData() *WafSettingsData {
	this := WafSettingsData{}
	return &this
}

// NewWafSettingsDataWithDefaults instantiates a new WafSettingsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafSettingsDataWithDefaults() *WafSettingsData {
	this := WafSettingsData{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WafSettingsData) GetData() WafSettings {
	if o == nil || IsNil(o.Data) {
		var ret WafSettings
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSettingsData) GetDataOk() (*WafSettings, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WafSettingsData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given WafSettings and assigns it to the Data field.
func (o *WafSettingsData) SetData(v WafSettings) {
	o.Data = &v
}

func (o WafSettingsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WafSettingsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableWafSettingsData struct {
	value *WafSettingsData
	isSet bool
}

func (v NullableWafSettingsData) Get() *WafSettingsData {
	return v.value
}

func (v *NullableWafSettingsData) Set(val *WafSettingsData) {
	v.value = val
	v.isSet = true
}

func (v NullableWafSettingsData) IsSet() bool {
	return v.isSet
}

func (v *NullableWafSettingsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafSettingsData(val *WafSettingsData) *NullableWafSettingsData {
	return &NullableWafSettingsData{value: val, isSet: true}
}

func (v NullableWafSettingsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafSettingsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



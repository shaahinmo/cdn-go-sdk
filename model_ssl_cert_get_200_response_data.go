/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.153.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdnapi

import (
	"encoding/json"
	"time"
)

// checks if the SslCertGet200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslCertGet200ResponseData{}

// SslCertGet200ResponseData struct for SslCertGet200ResponseData
type SslCertGet200ResponseData struct {
	// The certificate in base64-encoded
	Certificate *string `json:"certificate,omitempty"`
	// The private key in base64-encoded
	PrivateKey *string `json:"private_key,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Active *bool `json:"active,omitempty"`
	KeyType NullableString `json:"key_type,omitempty"`
	DomainNames []string `json:"domain_names,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	IsRevoked *bool `json:"is_revoked,omitempty"`
	ExpiryDate *time.Time `json:"expiry_date,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewSslCertGet200ResponseData instantiates a new SslCertGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCertGet200ResponseData() *SslCertGet200ResponseData {
	this := SslCertGet200ResponseData{}
	return &this
}

// NewSslCertGet200ResponseDataWithDefaults instantiates a new SslCertGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertGet200ResponseDataWithDefaults() *SslCertGet200ResponseData {
	this := SslCertGet200ResponseData{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SslCertGet200ResponseData) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *SslCertGet200ResponseData) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SslCertGet200ResponseData) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SslCertGet200ResponseData) SetType(v string) {
	o.Type = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SslCertGet200ResponseData) SetActive(v bool) {
	o.Active = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertGet200ResponseData) GetKeyType() string {
	if o == nil || IsNil(o.KeyType.Get()) {
		var ret string
		return ret
	}
	return *o.KeyType.Get()
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertGet200ResponseData) GetKeyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyType.Get(), o.KeyType.IsSet()
}

// HasKeyType returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasKeyType() bool {
	if o != nil && o.KeyType.IsSet() {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given NullableString and assigns it to the KeyType field.
func (o *SslCertGet200ResponseData) SetKeyType(v string) {
	o.KeyType.Set(&v)
}
// SetKeyTypeNil sets the value for KeyType to be an explicit nil
func (o *SslCertGet200ResponseData) SetKeyTypeNil() {
	o.KeyType.Set(nil)
}

// UnsetKeyType ensures that no value is present for KeyType, not even an explicit nil
func (o *SslCertGet200ResponseData) UnsetKeyType() {
	o.KeyType.Unset()
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetDomainNames() []string {
	if o == nil || IsNil(o.DomainNames) {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasDomainNames() bool {
	if o != nil && !IsNil(o.DomainNames) {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *SslCertGet200ResponseData) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *SslCertGet200ResponseData) SetIssuer(v string) {
	o.Issuer = &v
}

// GetIsRevoked returns the IsRevoked field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetIsRevoked() bool {
	if o == nil || IsNil(o.IsRevoked) {
		var ret bool
		return ret
	}
	return *o.IsRevoked
}

// GetIsRevokedOk returns a tuple with the IsRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetIsRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRevoked) {
		return nil, false
	}
	return o.IsRevoked, true
}

// HasIsRevoked returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasIsRevoked() bool {
	if o != nil && !IsNil(o.IsRevoked) {
		return true
	}

	return false
}

// SetIsRevoked gets a reference to the given bool and assigns it to the IsRevoked field.
func (o *SslCertGet200ResponseData) SetIsRevoked(v bool) {
	o.IsRevoked = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetExpiryDate() time.Time {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *SslCertGet200ResponseData) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SslCertGet200ResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SslCertGet200ResponseData) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCertGet200ResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SslCertGet200ResponseData) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SslCertGet200ResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o SslCertGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslCertGet200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if o.KeyType.IsSet() {
		toSerialize["key_type"] = o.KeyType.Get()
	}
	if !IsNil(o.DomainNames) {
		toSerialize["domain_names"] = o.DomainNames
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.IsRevoked) {
		toSerialize["is_revoked"] = o.IsRevoked
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiry_date"] = o.ExpiryDate
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableSslCertGet200ResponseData struct {
	value *SslCertGet200ResponseData
	isSet bool
}

func (v NullableSslCertGet200ResponseData) Get() *SslCertGet200ResponseData {
	return v.value
}

func (v *NullableSslCertGet200ResponseData) Set(val *SslCertGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCertGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCertGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCertGet200ResponseData(val *SslCertGet200ResponseData) *NullableSslCertGet200ResponseData {
	return &NullableSslCertGet200ResponseData{value: val, isSet: true}
}

func (v NullableSslCertGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCertGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


